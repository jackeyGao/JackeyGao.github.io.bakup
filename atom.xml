<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title><![CDATA[文本不限, 诗歌除外]]></title>
  
  <link href="/atom.xml" rel="self"/>
  <link href="http://omem.me/"/>
  <updated>2016-04-27T01:26:29.000Z</updated>
  <id>http://omem.me/</id>
  
  <author>
    <name><![CDATA[Jackey Gao]]></name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title><![CDATA[Python 介绍PPT]]></title>
    <link href="http://omem.me/2016/04/27/python-introduction/"/>
    <id>http://omem.me/2016/04/27/python-introduction/</id>
    <published>2016-04-27T01:23:26.000Z</published>
    <updated>2016-04-27T01:26:29.000Z</updated>
    <content type="html"><![CDATA[<p>一个Python语法介绍的入门文档</p>
<iframe src="//slides.com/jackeygao/deck-3/embed" width="700" height="450" scrolling="no" frameborder="0" webkitallowfullscreen="" mozallowfullscreen="" allowfullscreen></iframe>
]]></content>
    <summary type="html">
    <![CDATA[<p>一个Python语法介绍的入门文档</p>
<iframe src="//slides.com/jackeygao/deck-3/embed" width="700" height="450" scrolling="no" frameborder="0" webkitall]]>
    </summary>
    
      <category term="PPT" scheme="http://omem.me/tags/PPT/"/>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Centos 6.x 共存安装Python 2.7 or 3.x]]></title>
    <link href="http://omem.me/2016/04/21/python-multi-env/"/>
    <id>http://omem.me/2016/04/21/python-multi-env/</id>
    <published>2016-04-21T06:46:16.000Z</published>
    <updated>2016-04-21T06:51:45.000Z</updated>
    <content type="html"><![CDATA[<p>由于yum命令依赖系统的python2.6， 所以如果直接覆盖的话，会导致yum不能工作。 所以自带的python 2.6绝对不能动。 不过可以通过自定义安装来共存两套或多套python环境。 再配合virtualenv 隔离项目环境.</p>
<p>这里演示安装Python2.7 :</p>
<p><strong>首先安装系统依赖包</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">yum install zlib-devel</span><br><span class="line">yum install bzip2-devel</span><br><span class="line">yum install openssl-devel</span><br><span class="line">yum install ncurses-devel</span><br><span class="line">yum install sqlite-devel</span><br></pre></td></tr></table></figure>
<p><strong>下载Python2.7 源码编译安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> /usr/<span class="built_in">local</span>/src;</span><br><span class="line">wget --no-check-certificate https://www.python.org/ftp/python/<span class="number">2.7</span>.<span class="number">11</span>/Python-<span class="number">2.7</span>.<span class="number">11</span>.tar.xz</span><br><span class="line">tar xf Python-<span class="number">2.7</span>.<span class="number">11</span>.tar.xz</span><br><span class="line"><span class="built_in">cd</span> Python-<span class="number">2.7</span>.<span class="number">11</span></span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python27</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p><strong>安装pip</strong></p>
<p>使用python27安装pip</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> wget https://bitbucket.org/pypa/setuptools/raw/bootstrap/ez_setup.py</span><br><span class="line">/usr/<span class="built_in">local</span>/python27/bin/python ez_setup.py</span><br><span class="line">/usr/<span class="built_in">local</span>/python27/bin/easy_install pip</span><br></pre></td></tr></table></figure>
<p>到这里python2.7.11 和 pip套件都安装了可以使用了。 下一步就是把<code>/usr/local/python27/bin/</code> 加入<code>$PATH</code>变量。</p>
<h3 id="安装virtualenvwrapper">安装virtualenvwrapper</h3><p>这一步实在自带的python2.6 上执行的， 所以如果用python 2.7 需要再创建的虚拟环境的时候指定</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install virtualenvwrapper</span><br></pre></td></tr></table></figure>
<p>然后再<code>~/.bashrc</code>文件追加以下操作</p>
<p><code>~/.bashrc</code> or <code>./zshrc</code><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">source</span> $(<span class="built_in">which</span> virtualenvwrapper.sh)</span><br></pre></td></tr></table></figure></p>
<p>然后<code>source ~/.bashrc</code> 这样就可以使用<code>workon</code>、 <code>mkvirtualenv</code>、 <code>rmvirtualenv</code>命令.具体的指南参考 <a href="https://virtualenvwrapper.readthedocs.org/en/latest/command_ref.html" target="_blank" rel="external">virtualenvwrapper</a></p>
<p>创建基于Python 2.7 的虚拟环境</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mkvirtualenv ansible -p /usr/<span class="built_in">local</span>/python2.<span class="number">7.11</span>/bin/python</span><br></pre></td></tr></table></figure>
<h3 id="错误处理">错误处理</h3><p>第一个错误,  <code>source $(which virtualenvwrapper.sh)</code>出现<code>logging no NullHandler</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">Traceback (most recent call last):</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.6/runpy.py"</span>, line <span class="number">122</span>, <span class="keyword">in</span> _run_module_as_main</span><br><span class="line">    <span class="string">"__main__"</span>, fname, loader, pkg_name)</span><br><span class="line">  File <span class="string">"/usr/lib64/python2.6/runpy.py"</span>, line <span class="number">34</span>, <span class="keyword">in</span> _run_code</span><br><span class="line">    <span class="keyword">exec</span> code <span class="keyword">in</span> run_globals</span><br><span class="line">  File <span class="string">"/usr/lib/python2.6/site-packages/virtualenvwrapper/hook_loader.py"</span>, line <span class="number">16</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    <span class="keyword">from</span> stevedore <span class="keyword">import</span> ExtensionManager</span><br><span class="line">  File <span class="string">"/usr/lib/python2.6/site-packages/stevedore/__init__.py"</span>, line <span class="number">23</span>, <span class="keyword">in</span> &lt;module&gt;</span><br><span class="line">    LOG.addHandler(logging.NullHandler())</span><br><span class="line">AttributeError: <span class="string">'module'</span> object has no attribute <span class="string">'NullHandler'</span></span><br><span class="line">virtualenvwrapper.sh: There was a problem running the initialization hooks.</span><br><span class="line"></span><br><span class="line">If Python could <span class="keyword">not</span> <span class="keyword">import</span> the module virtualenvwrapper.hook_loader,</span><br><span class="line">check that virtualenvwrapper has been installed <span class="keyword">for</span></span><br><span class="line">VIRTUALENVWRAPPER_PYTHON=/usr/bin/python <span class="keyword">and</span> that PATH <span class="keyword">is</span></span><br></pre></td></tr></table></figure>
<p>处理方法, 升级stevedore</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install stevedore</span><br></pre></td></tr></table></figure>
<p><code>python 2.6.6</code> 可以升级到1.3.0 就可以了.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>由于yum命令依赖系统的python2.6， 所以如果直接覆盖的话，会导致yum不能工作。 所以自带的python 2.6绝对不能动。 不过可以通过自定义安装来共存两套或多套python环境。 再配合virtualenv 隔离项目环境.</p>
<p>这里演示安装Pytho]]>
    </summary>
    
      <category term="Centos" scheme="http://omem.me/tags/Centos/"/>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
      <category term="virtualenv" scheme="http://omem.me/tags/virtualenv/"/>
    
      <category term="virtualenvwrapper" scheme="http://omem.me/tags/virtualenvwrapper/"/>
    
      <category term="折腾" scheme="http://omem.me/tags/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Celery用户手册 - Tasks]]></title>
    <link href="http://omem.me/2016/04/19/celery-userguide-tasks/"/>
    <id>http://omem.me/2016/04/19/celery-userguide-tasks/</id>
    <published>2016-04-19T06:39:27.000Z</published>
    <updated>2016-04-19T07:46:44.000Z</updated>
    <content type="html"><![CDATA[<p><code>Tasks</code>是Celery 应用的构建块。事实上Celery应用是由一个或多个Task拼装组成的。</p>
<p>一个Task即是一个对象， Task被创建后可以被所有调用， 它是双重角色， 当Task被调用可以通过Task可以发送消息， 同时当作为一个worker的时候可以接收消息，并消费。</p>
<p>每个Task name 都是唯一的， 这样可以通过这个名字，找到合适的function去执行消费。</p>
<p>当发送一个任务消息在worker确认(acknowledged)前不会消失，一个worker可以提前存储很多消息，如果worker进程崩溃或killed，消息也不会消失， 消息会通过在投递的方式给其他存活worker。</p>
<p>理想的Task函数必须是幂等的，这意味着相同的参数调用多次不会出现不同的结果。但是worker并不知道函数是幂等的， woker默认是提前确认消息， 在执行完成之前这个task永远不会被重复执行。 这个就是上锁(LOCK)意思。这一段和上一段还是有区别的， 这一段强调的是<strong>开始执行之前确认</strong>。</p>
<p>当然确认如果任务是幂等的，你可以设置<code>acks_late</code>选项来控制worker 在函数返回之后去确认消息<code>acknowledge</code>. 请参考: <a href="http://docs.celeryproject.org/en/latest/faq.html#faq-acks-late-vs-retry%20%22%22" target="_blank" rel="external">Should I use retry or acks_late?</a></p>
<p>在这一章节， 你将学习所有关于任务的定义，以下为目录:</p>
<blockquote>
<ul>
<li><a href="#basics">Basics</a></li>
<li><a href="#names">Names</a></li>
<li><a href="#context">Context</a></li>
<li><a href="#logging">Logging</a></li>
<li><a href="#retrying">Retrying</a></li>
<li><a href="#listofoptions">List of Options</a></li>
<li><a href="#states">States</a></li>
<li><a href="#semipredicates">Semipredicates</a></li>
<li><a href="#customtaskclasses">Custom task classes</a></li>
<li><a href="#howitworks">How it works</a></li>
<li><a href="#tips">Tips and Best Practices</a></li>
<li><a href="#performance">Performance and Strategies</a></li>
<li><a href="#example">Example</a></li>
</ul>
</blockquote>
<h2 id="Basics">Basics <span id="basics"></span></h2><p>你可以很容易的创建任务在任何的可调用函数上使用<code>task()</code>装饰器.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .models <span class="keyword">import</span> User</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    User.objects.create(username=username, password=password)</span><br></pre></td></tr></table></figure>
<p>可以在装饰器上指定参数， 来设置<code>Task</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@app.task(serializer='json')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_user</span><span class="params">(username, password)</span>:</span></span><br><span class="line">    User.objects.create(username=username, password=password)</span><br></pre></td></tr></table></figure>
<p><strong>Multiple decorators</strong></p>
<p>当使用多个装饰器，需要确保任务装饰生效， 把<code>task decorator</code> 写在函数第一个装饰器.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@app.task</span></span><br><span class="line"><span class="decorator">@decorator2</span></span><br><span class="line"><span class="decorator">@decorator1</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
<p><strong>如何引入task装饰器？</strong></p>
<p><code>task decorator</code> 存在于你的Celery应用的实例上， 上一节我们已经讲过如何声明Application和使用它. </p>
<p>如果你使用的是Django 或者仍然适用老的版本， 你可能导入<code>task decorator</code>的方式是下面这样.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> task</span><br><span class="line"></span><br><span class="line"><span class="decorator">@task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
<h2 id="Names">Names <span id="names"></span></h2><p>每个任务都有一个唯一的名称， 一个任务创建时如果不提供一个自定义的名字， 将会去生成一个任务.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>@app.task(name=<span class="string">'sum-of-two-numbers'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="prompt">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>add.name</span><br><span class="line"><span class="string">'sum-of-two-numbers'</span></span><br></pre></td></tr></table></figure>
<p>最好的方式是适用模块名称作为一个名称空间，如果一个任务另外一个模块中也有这样的名称如user模块中有<code>add</code>, group 模块中也有<code>add</code>, 那么这样就会冲突. 最好的方式如下:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>@app.task(name=<span class="string">'tasks.add'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="prompt">... </span>    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
<p>你可以通过调用task的属性来获取task name.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>add.name</span><br><span class="line"><span class="string">'tasks.add'</span></span><br></pre></td></tr></table></figure>
<p>如果不指定， 默认也会通过模块名和函数名拼装生成name</p>
<p><code>tasks.py</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> tasks <span class="keyword">import</span> add</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>add.name</span><br><span class="line"><span class="string">'tasks.add'</span></span><br></pre></td></tr></table></figure>
<p><strong>自动命名和相对import</strong></p>
<p>相对import和自动命名不能一起工作， 所以如果适用相对引入你必须精确的设置name.</p>
<p>如果一个客户端(创建消息的时候) 导入这个<code>myapp.tasks</code> 通过<code>.tasks</code>导入，另外一个worker导入模块通过<code>myapp.tasks</code>， 生成的名称不匹配导致worker会抛出<code>NotRegistered</code> 从而不能工作.</p>
<p>Django INSTALLED_APPS的<code>project.myapp</code>风格.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSTALLED_APPS = [<span class="string">'project.myapp'</span>]</span><br></pre></td></tr></table></figure>
<p>如果你安装app使用<code>project.myapp</code>, 那么task导入的时候也要通过<code>project.myapp.tasks</code>导入， 所以你要确保总是使用相同的名称导入任务.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> project.myapp.tasks <span class="keyword">import</span> mytask   <span class="comment"># &lt;&lt; GOOD</span></span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> myapp.tasks <span class="keyword">import</span> mytask    <span class="comment"># &lt;&lt; BAD!!!</span></span><br></pre></td></tr></table></figure>
<p>上面第二个例子将导致任务以不同的方式命名， 进而导致客户端和worker不用的任务名称。</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> project.myapp.tasks <span class="keyword">import</span> mytask</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>mytask.name</span><br><span class="line"><span class="string">'project.myapp.tasks.mytask'</span></span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> myapp.tasks <span class="keyword">import</span> mytask</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>mytask.name</span><br><span class="line"><span class="string">'myapp.tasks.mytask'</span></span><br></pre></td></tr></table></figure>
<p>因而你导入必须一致， 这也是python推荐的方式。</p>
<p>同样的你不应该使用旧风格进行相对引入.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> module <span class="keyword">import</span> foo   <span class="comment"># BAD!</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> proj.module <span class="keyword">import</span> foo  <span class="comment"># GOOD!</span></span><br></pre></td></tr></table></figure>
<p>以下新的风格相对引入也是可以推荐的</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> .module <span class="keyword">import</span> foo  <span class="comment"># GOOD!</span></span><br></pre></td></tr></table></figure>
<p>如果你的程序已经做了错的引入， 并且你没有时间去重构， 建议通过显式的指定名称去覆盖自动命名.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@task(name='proj.tasks.add')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
<h2 id="Context">Context <span id="context"></span></h2><p>执行任务<code>request</code> 包含的信息和状态.</p>
<p><code>request</code>定义了以下属性</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>id:</strong></td>
<td>执行任务的唯一ID</td>
</tr>
<tr>
<td><strong>group:</strong></td>
<td>组id如果属于组</td>
</tr>
<tr>
<td><strong>chord:</strong></td>
<td>The unique id of the chord this task belongs to (if the task is part of the header).</td>
</tr>
<tr>
<td><strong>args:</strong></td>
<td>位置参数</td>
</tr>
<tr>
<td><strong>kwargs:</strong></td>
<td>键值参数</td>
</tr>
<tr>
<td><strong>retries:</strong></td>
<td>重拾次数</td>
</tr>
<tr>
<td><strong>is_eager:</strong></td>
<td>如果不是工人是本地客户端，设置为True</td>
</tr>
<tr>
<td><strong>eta:</strong></td>
<td>预计任务时间</td>
</tr>
<tr>
<td><strong>expires:</strong></td>
<td>任务的过期时</td>
</tr>
<tr>
<td><strong>logfile:</strong></td>
<td>worker 的日志文件, See: <a href="#logging">logging</a></td>
</tr>
<tr>
<td><strong>loglevel:</strong></td>
<td>当前使用的日志级别</td>
</tr>
<tr>
<td><strong>hostname:</strong></td>
<td>worker实例的hostname</td>
</tr>
<tr>
<td><strong>delivery_info:</strong></td>
<td>额外的传递信息</td>
</tr>
<tr>
<td><strong>called_directly:</strong></td>
<td>This flag is set to true if the task was not executed by the worker.</td>
</tr>
<tr>
<td><strong>callbacks:</strong></td>
<td>回调函数</td>
</tr>
<tr>
<td><strong>errback:</strong></td>
<td>异常回调函数</td>
</tr>
<tr>
<td><strong>utc:</strong></td>
<td>如果为True说明调用者启动了utc</td>
</tr>
</tbody>
</table>
<p>3.1 新属性</p>
<table>
<thead>
<tr>
<th>key</th>
<th>value</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>headers:</strong></td>
<td>映射消息头</td>
</tr>
<tr>
<td><strong>reply_to:</strong></td>
<td>发送replay到哪个队列</td>
</tr>
<tr>
<td><strong>correlation_id:</strong></td>
<td>通常与任务id通用， 常用语amqp的跟踪回复</td>
</tr>
</tbody>
</table>
<p>一个从context获取获取信息的例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump_context</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">    print(<span class="string">'Executing task id &#123;0.id&#125;, args: &#123;0.args!r&#125; kwargs: &#123;0.kwargs!r&#125;'</span>.format(</span><br><span class="line">            self.request))</span><br></pre></td></tr></table></figure>
<h2 id="Logging">Logging <span id="logging"></span></h2><p>worker 将会自动配置logging， 也可以手动配置定制logging 日志输出.</p>
<p>Celery 提供一个名为<code>celery.task</code>的logger供使用, 你可以通过这个logger 自动的生成一个名称和唯一id作为日志的一部分.</p>
<p>推荐在每个模块中都声明一个logger， 每个模块使用单独的logger.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery.utils.log <span class="keyword">import</span> get_task_logger</span><br><span class="line"></span><br><span class="line">logger = get_task_logger(__name__)</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    logger.info(<span class="string">'Adding &#123;0&#125; + &#123;1&#125;'</span>.format(x, y))</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
<p>Celery 使用Python标准库的logging模块， 文档支持可以在<a href="http://docs.python.org/dev/library/logging.html#module-logging" target="_blank" rel="external">logging</a> 模块中看到</p>
<p>你也可以使用<code>print()</code>, 任何写入标准输出和标准错误都会转到日志系统。 所以print的字符也会作为日志记录， 记录等级为<strong>WARN</strong>.</p>
<h2 id="Retrying">Retrying <span id="retrying"></span></h2><p><code>retry()</code> 可以重试任务， 当任务出现可恢复的错误.</p>
<p>当调用<code>retry()</code>时将会发送一个新的消息， 使用相同的task-id,  确保消息和原始任务属于相同的队列.</p>
<p>当一个消息重试后， 任务也会记录一个状态。这样你可以使用结果实例跟踪任务状态记录(see <a href="#states">States</a>)</p>
<p>一个使用<code>retry()</code> 的例子:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@app.task(bind=True)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">send_twitter_status</span><span class="params">(self, oauth, tweet)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        twitter = Twitter(oauth)</span><br><span class="line">        twitter.update_status(tweet)</span><br><span class="line">    <span class="keyword">except</span> (Twitter.FailWhaleError, Twitter.LoginError) <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="keyword">raise</span> self.retry(exc=exc)</span><br></pre></td></tr></table></figure>
<p><code>bind</code> 参数告诉装饰器将会给一个可以访问的self实例.</p>
<p>当存储任务结果，exc 是用于传递异常信息用户日志输出。 内容有异常信息和traceback信息都存在于exc.</p>
<p>如果此任务有<code>max_retries</code>值， 并且重试次数超过了这个值， 那么这个exc异常将会重新raise.  如果是下列情况将不会这样:</p>
<ul>
<li>exc 没有指定</li>
</ul>
<p>这种情况下将会raise <code>MaxRetriesExceeded</code>异常, 这个是默认异常</p>
<ul>
<li>没有异常</li>
</ul>
<p>当重试没有异常发生(也就是上面except没有发生)， 重试次数达到了， 但task还没有正确返回， 可以指定给exc一个异常， 用于代理默认的<code>MaxRetriesExceeded</code>.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">self.retry(exc=Twitter.LoginError())</span><br></pre></td></tr></table></figure>
<p>将会触发提供的异常信息。 </p>
<p><strong>自定义重试间隔</strong></p>
<p>当一个任务要去重试， 可以指定一个时间之后再去重试. 使用<code>default_retry_delay</code>属性来设置默认延迟.默认是三分钟,  注意: 延迟的单位是秒.</p>
<p>你可以使用 <code>retry(..., countdown=60s)</code>来覆盖task级别的<code>default_retry_delay</code>时间. 两种方法灵活使用 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@app.task(bind=True, default_retry_delay=30 * 60)  # retry in 30 minutes.</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, x, y)</span>:</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        …</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> exc:</span><br><span class="line">        <span class="keyword">raise</span> self.retry(exc=exc, countdown=<span class="number">60</span>)  <span class="comment"># override the default and                                                 # retry in 1 minute</span></span><br></pre></td></tr></table></figure>
<h2 id="List_of_Options">List of Options <span id="listofoptions"></span></h2><p>Task.<strong>name</strong></p>
<p>task 注册名</p>
<p>可以手动设置，也可以生成此name. See: <a href="#names">Names</a></p>
<p>未完待续&gt;&gt;&gt;</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><code>Tasks</code>是Celery 应用的构建块。事实上Celery应用是由一个或多个Task拼装组成的。</p>
<p>一个Task即是一个对象， Task被创建后可以被所有调用， 它是双重角色， 当Task被调用可以通过Task可以发送消息， 同时当作为]]>
    </summary>
    
      <category term="Celery" scheme="http://omem.me/tags/Celery/"/>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
      <category term="翻译" scheme="http://omem.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Celery用户手册 - Application]]></title>
    <link href="http://omem.me/2016/04/18/celery-userguide-application/"/>
    <id>http://omem.me/2016/04/18/celery-userguide-application/</id>
    <published>2016-04-18T06:51:56.000Z</published>
    <updated>2016-04-18T06:52:55.000Z</updated>
    <content type="html"><![CDATA[<h2 id="Application">Application</h2><p>必须使用一个Application实例来创建celery 任务.</p>
<p>该Application线程是安全(thread-safe)的，以便你可以使用多个不同的Application 配置.  组件和任务能共存于相同的进程空间。</p>
<p>创建一个Application实例:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>app = Celery()</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>app</span><br><span class="line">&lt;Celery __main__:<span class="number">0x100469fd0</span>&gt;</span><br></pre></td></tr></table></figure>
<p>最后一行显示的是此Application实例的文本描述，其中包括celery类的名称，此实例存在于<code>__main__</code> 主模块中和此实例的内存地址.</p>
<h3 id="Main_Name">Main Name</h3><p><code>Main Name</code> 是个很重要的概念， 以下会介绍为什么重要.</p>
<p>当你使用Celery 推送一个任务消息， 这个消息不携带任何的源代码，但是需要指定一个此消息需要执行的任务名称。这种工作方式类似于hostname工作方式， 在网络上: 每个worker维护着任务名和他们所能执行的实际函数. 这就是所谓的<code>task registry</code>(任务注册表).</p>
<p>每当你定义一个任务,  该任务也将要添加到本地的<code>task registry</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>@app.task</span><br><span class="line"><span class="prompt">... </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="prompt">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>add</span><br><span class="line">&lt;@task: __main__.add&gt;</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>add.name</span><br><span class="line">__main__.add</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>app.tasks[<span class="string">'__main__.add'</span>] <span class="comment"># 根据task name取出实际函数(function)</span></span><br><span class="line">&lt;@task: __main__.add&gt;</span><br></pre></td></tr></table></figure>
<p>这里你会在此看到<code>__main__</code> ，每当Celery无法检索到function属于哪个模块, 它会使用主模块名称生成任务模块， 即<code>__main__.add</code>.</p>
<p>这种现象只会出现在下面情况中：</p>
<ol>
<li>定义的task所属的application 在一个主模块中</li>
<li>此application实例创建在Python 交互式环境中</li>
</ol>
<p>第一种:<br><code>tasks.py</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line">app = Celery()</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.task</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span> <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    app.worker_main()</span><br></pre></td></tr></table></figure>
<p>当这个<code>tasks.py</code> 作为一个主模块执行的时候(<code>__main__</code>成立)任务名称以<code>__main__</code>开头， 即<code>__main__.add</code>. 但是当此模块被另外一个模块引用的时候，它的任务名称将以<code>tasks</code>开头, 即<code>tasks.add</code>.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">from</span> tasks <span class="keyword">import</span> add</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>add.name</span><br><span class="line">tasks.add</span><br></pre></td></tr></table></figure>
<p>可以在创建的Application的时候指定一个名称.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>app = Celery(<span class="string">'tasks'</span>)</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>app.main</span><br><span class="line"><span class="string">'tasks'</span></span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>@app.task</span><br><span class="line"><span class="prompt">... </span><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line"><span class="prompt">... </span>    <span class="keyword">return</span> x + y</span><br><span class="line"></span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>add.name</span><br><span class="line">tasks.add</span><br></pre></td></tr></table></figure>
<blockquote>
<p>参考: <a href="http://docs.jinkan.org/docs/celery/userguide/tasks.html#task-names" target="_blank" rel="external">Names</a></p>
</blockquote>
<h3 id="Configuration">Configuration</h3><p>你可以设置Celery的其他选项，这些选项作用于application 实例. 但你最好单独定义一个配置模块。 </p>
<p>查看一个配置<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>app.conf.CELERY_TIMEZONE</span><br><span class="line"><span class="string">'Europe/London'</span></span><br></pre></td></tr></table></figure></p>
<p>你也可以直接设置配置项<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>app.conf.CELERY_ENABLE_UTC = <span class="keyword">True</span></span><br></pre></td></tr></table></figure></p>
<p>使用<code>update</code>方法更新多个键值.<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>app.conf.update(</span><br><span class="line"><span class="prompt">... </span>    CELERY_ENABLE_UTC=<span class="keyword">True</span>,</span><br><span class="line"><span class="prompt">... </span>    CELERY_TIMEZONE=<span class="string">'Europe/London'</span>,</span><br><span class="line">...)</span><br></pre></td></tr></table></figure></p>
<p>配置对象可以通过多种方法去修改操作, 他们的优先级是:</p>
<ol>
<li>运行时修改</li>
<li>配置模块(如果有的话)</li>
<li>默认配置模块(<strong>celery.app.defaults</strong>)</li>
</ol>
<p>你甚至可以使用celery.add_defaults()方法来添加新的默认源.</p>
<blockquote>
<p>参见: <a href="http://docs.jinkan.org/docs/celery/configuration.html#configuration" target="_blank" rel="external">Configuration reference</a> 查看支持的通用选项参数列表.</p>
</blockquote>
<h4 id="config_from_object">config_from_object</h4><p><code>Celery.config_from_object()</code> 可以从一个配置对象加载配置， 可以是一个配置模块， 或者其他配置属性的对象.</p>
<p>需要注意的是， 使用此方法后默认参数将会被重置， 如果配置对象的键值和默认对象有冲突的话。 如果你想设置额外的配置你应该在之后在此方法之后去设置.</p>
<p><strong>Example 1: 使用name作为module</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery()</span><br><span class="line">app.config_from_object(<span class="string">'celeryconfig'</span>)</span><br></pre></td></tr></table></figure>
<p><code>celeryconfig</code> 作为字符串对象传入， <code>celeryconfig</code>内容如下</p>
<p><code>celeryconfig.py</code>:<br><figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">CELERY_ENABLE_UTC = <span class="value"><span class="keyword">True</span></span></span></span><br><span class="line"><span class="setting">CELERY_TIMEZONE = <span class="value"><span class="string">'Europe/London'</span></span></span></span><br></pre></td></tr></table></figure></p>
<p><strong>Example 2: 使用configtion module</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery()</span><br><span class="line"><span class="keyword">import</span> celeryconfig</span><br><span class="line">app.config_from_object(celeryconfig)</span><br></pre></td></tr></table></figure>
<p><strong>Example 3: 使用configtion class/object</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line">app = Celery()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Config</span>:</span></span><br><span class="line">    CELERY_ENABLE_UTC = <span class="keyword">True</span></span><br><span class="line">    CELERY_TIMEZONE = <span class="string">'Europe/London'</span></span><br><span class="line"></span><br><span class="line">app.config_from_object(Config)</span><br><span class="line"><span class="comment"># or using the fully qualified name of the object:</span></span><br><span class="line"><span class="comment">#   app.config_from_object('module:Config')</span></span><br></pre></td></tr></table></figure>
<h4 id="config_from_envvar">config_from_envvar</h4><p>使用<code>Celery.config_from_envvar()</code>方法可以从环境变量来设置选项.</p>
<p>从环境变量名为<strong>CELERY_CONFIG_MODULE</strong>加载配置:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Celery</span><br><span class="line"></span><br><span class="line"><span class="comment">#: Set default configuration module name</span></span><br><span class="line">os.environ.setdefault(<span class="string">'CELERY_CONFIG_MODULE'</span>, <span class="string">'celeryconfig'</span>)</span><br><span class="line"></span><br><span class="line">app = Celery()</span><br><span class="line">app.config_from_envvar(<span class="string">'CELERY_CONFIG_MODULE'</span>)</span><br></pre></td></tr></table></figure>
<p>然后你可以指定配置模块，通过设置环境变量的方法:</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ CELERY_CONFIG_MODULE=<span class="string">"celeryconfig.prod"</span> celery worker <span class="operator">-l</span> info</span><br></pre></td></tr></table></figure>
<h3 id="Censored_configuration">Censored configuration</h3><p>如果你想打印出配置， 但是你不想打印一些敏感的数据， 就像密码和API 密钥类似的敏感信息。</p>
<p>Celery 支持用于展示配置相关逻辑， 一个就是<code>humanize()</code>:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span>app.conf.humanize(with_defaults=<span class="keyword">False</span>, censored=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<p>此方法将会隐藏敏感信息， 如果<code>with_defaults</code>为true的话， 可以显示为默认的值。</p>
<p>默认情况下Celery认为配置KEY中包含<code>API</code>, <code>TOKEN</code>, <code>KEY</code>, <code>SECRET</code>, <code>PASS</code>, <code>SIGNATURE</code>, <code>DATABASE</code>这些字符的都为敏感信息。</p>
<h3 id="Breaking_the_chain">Breaking the chain</h3><p>并没有看懂这段 , 貌似讲的是一种规范.</p>
<h3 id="Abstract_Tasks">Abstract Tasks</h3><p>以上所有的tasks创建的时候都使用了task() 装饰器，task会继承Task class.</p>
<p>当然可以指定成其他的Task基类， 比如下面代码中<code>base=OtherTask</code>, 那么此task的基类为<code>OtherTask</code>.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="decorator">@app.task(base=OtherTask):</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(x, y)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x + y</span><br></pre></td></tr></table></figure>
<p>如果你想创建一个自定义的Task 类， 你必须继承自<code>celery.Task</code></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> celery <span class="keyword">import</span> Task</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">DebugTask</span><span class="params">(Task)</span>:</span></span><br><span class="line">    abstract = <span class="keyword">True</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, *args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">'TASK STARTING: &#123;0.name&#125;[&#123;0.request.id&#125;]'</span>.format(self))</span><br><span class="line">        <span class="keyword">return</span> super(DebugTask, self).__call__(*args, **kwargs)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="Application">Application</h2><p>必须使用一个Application实例来创建celery 任务.</p>
<p>该Application线程是安全(thread-safe)的，以便你可以使用多个不同的Application 配置. ]]>
    </summary>
    
      <category term="Celery" scheme="http://omem.me/tags/Celery/"/>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
      <category term="翻译" scheme="http://omem.me/tags/%E7%BF%BB%E8%AF%91/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[用Python不务正业 - 第一弹]]></title>
    <link href="http://omem.me/2016/04/16/python-funny/"/>
    <id>http://omem.me/2016/04/16/python-funny/</id>
    <published>2016-04-16T10:31:40.000Z</published>
    <updated>2016-04-16T10:44:10.000Z</updated>
    <content type="html"><![CDATA[<p>从这篇开始会做一个<code>用Python不务正业</code>专题， 记录Python一些一无是用但是很好玩的脚本.本期是一个<code>终端乱弹</code>的脚本.</p>
<p><strong>效果图:</strong></p>
<p><img src="/uploads/images/xiaoguo.gif" alt="效果图"></p>
<p>记得刚学shell的时候做过终端随机的点生成随机颜色的字符， 只为好玩和增强脚本开发技能， 下午闲来无事用python实现了， 正好学习了python的<code>curses</code>标准库. python <code>curses</code>标准库可以用来对终端定制开发， 做一些友好的终端命令。</p>
<p>本脚本不需要安装其他的库， 只依赖标准库， 在Python2.7 测试通过， 以下为代码:</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">File Name: mt2.py</span><br><span class="line">Author: JackeyGao</span><br><span class="line">mail: gaojunqi@outlook.com</span><br><span class="line">Created Time: Fri Apr 15 15:52:31 2016</span><br><span class="line">'''</span></span><br><span class="line"><span class="keyword">import</span> os, sys</span><br><span class="line"><span class="keyword">import</span> locale</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> curses</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> traceback</span><br><span class="line"></span><br><span class="line">locale.setlocale(locale.LC_ALL, <span class="string">''</span>)</span><br><span class="line">code = locale.getpreferredencoding()</span><br><span class="line"></span><br><span class="line">stdscr = curses.initscr()</span><br><span class="line">size = <span class="keyword">lambda</span>: os.popen(<span class="string">'stty size'</span>, <span class="string">'r'</span>).read().split()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show_point</span><span class="params">(str, x, y, colorpair=<span class="number">2</span>)</span>:</span></span><br><span class="line">    <span class="keyword">global</span> stdscr</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        stdscr.addstr(y, x, str, curses.color_pair(colorpair))</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    stdscr.refresh()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">set_window</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''''控制台设置'''</span></span><br><span class="line">    <span class="keyword">global</span> stdscr</span><br><span class="line">    curses.start_color()</span><br><span class="line">    curses.init_pair(<span class="number">1</span>, curses.COLOR_RED, curses.COLOR_BLACK)</span><br><span class="line">    curses.init_pair(<span class="number">2</span>, curses.COLOR_GREEN, curses.COLOR_BLACK)</span><br><span class="line">    curses.init_pair(<span class="number">3</span>, curses.COLOR_YELLOW, curses.COLOR_BLACK)</span><br><span class="line">    curses.init_pair(<span class="number">4</span>, curses.COLOR_BLUE, curses.COLOR_BLACK)</span><br><span class="line">    curses.init_pair(<span class="number">5</span>, curses.COLOR_MAGENTA, curses.COLOR_BLACK)</span><br><span class="line">    curses.init_pair(<span class="number">6</span>, curses.COLOR_CYAN, curses.COLOR_BLACK)</span><br><span class="line">    curses.init_pair(<span class="number">7</span>, curses.COLOR_WHITE, curses.COLOR_BLACK)</span><br><span class="line">    curses.noecho()</span><br><span class="line">    curses.cbreak()</span><br><span class="line">    stdscr.nodelay(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">unset_window</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="string">'''控制台重置'''</span></span><br><span class="line">    <span class="keyword">global</span> stdstr</span><br><span class="line">    curses.nocbreak()</span><br><span class="line">    stdscr.keypad(<span class="number">0</span>)</span><br><span class="line">    curses.echo()</span><br><span class="line">    curses.endwin()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signal_handler</span><span class="params">(signal, frame)</span>:</span></span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">'__main__'</span>:</span><br><span class="line">    signal.signal(signal.SIGINT, signal_handler)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        set_window()</span><br><span class="line">        <span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">            height, weight = size()</span><br><span class="line">            y = random.randrange(<span class="number">0</span>, int(height), <span class="number">1</span>)</span><br><span class="line">            x = random.randrange(<span class="number">0</span>, int(weight), <span class="number">1</span>)</span><br><span class="line">            color = random.randrange(<span class="number">1</span>, <span class="number">8</span>, <span class="number">1</span>)</span><br><span class="line">            show_point(<span class="string">'Ooo0oOo'</span>, x, y, colorpair=color)</span><br><span class="line">            time.sleep(<span class="number">0.01</span>)</span><br><span class="line">    <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">finally</span>:</span><br><span class="line">        unset_window()</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>从这篇开始会做一个<code>用Python不务正业</code>专题， 记录Python一些一无是用但是很好玩的脚本.本期是一个<code>终端乱弹</code>的脚本.</p>
<p><strong>效果图:</strong></p>
<p><img src="/upl]]>
    </summary>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
      <category term="Python不务正业" scheme="http://omem.me/tags/Python%E4%B8%8D%E5%8A%A1%E6%AD%A3%E4%B8%9A/"/>
    
      <category term="终端乱弹" scheme="http://omem.me/tags/%E7%BB%88%E7%AB%AF%E4%B9%B1%E5%BC%B9/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Karabiner profile 命令行切换方式]]></title>
    <link href="http://omem.me/2016/04/14/karabiner-switch-command-line/"/>
    <id>http://omem.me/2016/04/14/karabiner-switch-command-line/</id>
    <published>2016-04-14T03:35:05.000Z</published>
    <updated>2016-04-14T03:51:16.000Z</updated>
    <content type="html"><![CDATA[<p>Karabiner 提供了一个命令行工具来方便脚本编程， 一般这个命令行工具在安装包的bin目录下， 具体地址为: <code>/Applications/Karabiner.app/Contents/Library/bin/karabiner</code> </p>
<h2 id="帮助文档">帮助文档</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">Usage:</span><br><span class="line">  Profile operations:</span><br><span class="line">    $ karabiner list</span><br><span class="line">    $ karabiner select INDEX (INDEX starts at <span class="number">0</span>)</span><br><span class="line">    $ karabiner select_by_name NAME</span><br><span class="line">    $ karabiner selected</span><br><span class="line">    $ karabiner append NAME</span><br><span class="line">    $ karabiner rename INDEX NEWNAME (INDEX starts at <span class="number">0</span>)</span><br><span class="line">    $ karabiner delete INDEX (INDEX starts at <span class="number">0</span>)</span><br><span class="line">  Settings:</span><br><span class="line">    $ karabiner <span class="built_in">set</span> IDENTIFIER VALUE</span><br><span class="line">    $ karabiner <span class="built_in">enable</span> IDENTIFIER (<span class="built_in">alias</span> of <span class="built_in">set</span> IDENTIFIER <span class="number">1</span>)</span><br><span class="line">    $ karabiner <span class="built_in">disable</span> IDENTIFIER (<span class="built_in">alias</span> of <span class="built_in">set</span> IDENTIFIER <span class="number">0</span>)</span><br><span class="line">    $ karabiner toggle IDENTIFIER</span><br><span class="line">    $ karabiner changed</span><br><span class="line">  Others:</span><br><span class="line">    $ karabiner <span class="built_in">export</span></span><br><span class="line">    $ karabiner reloadxml</span><br><span class="line">    $ karabiner relaunch</span><br><span class="line">    $ karabiner be_careful_to_use__clear_all_values_by_name PROFILE_NAME</span><br><span class="line"></span><br><span class="line">Examples:</span><br><span class="line">  $ karabiner list</span><br><span class="line">  $ karabiner select <span class="number">1</span></span><br><span class="line">  $ karabiner select_by_name NewItem</span><br><span class="line">  $ karabiner selected</span><br><span class="line">  $ karabiner append <span class="string">"For external keyboard"</span></span><br><span class="line">  $ karabiner rename <span class="number">1</span> <span class="string">"Empty Setting"</span></span><br><span class="line">  $ karabiner delete <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  $ karabiner <span class="built_in">set</span> repeat.wait <span class="number">30</span></span><br><span class="line">  $ karabiner <span class="built_in">enable</span> remap.shiftL2<span class="built_in">command</span>L</span><br><span class="line">  $ karabiner <span class="built_in">disable</span> remap.shiftL2<span class="built_in">command</span>L</span><br><span class="line">  $ karabiner toggle remap.shiftL2<span class="built_in">command</span>L</span><br><span class="line">  $ karabiner changed</span><br><span class="line"></span><br><span class="line">  $ karabiner <span class="built_in">export</span></span><br><span class="line">  $ karabiner reloadxml</span><br><span class="line">  $ karabiner relaunch</span><br><span class="line">  $ karabiner be_careful_to_use__clear_all_values_by_name NewItem</span><br></pre></td></tr></table></figure>
<h3 id="简单介绍">简单介绍</h3><p><strong>查看已定义的profile</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ karabiner list</span><br><span class="line"><span class="number">0</span>: Default</span><br><span class="line"><span class="number">1</span>: Poker2</span><br></pre></td></tr></table></figure>
<p><strong>切换到指定profile 通过index</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ karabiner select <span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>切换到指定profile 通过item name</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ karabiner select_by_name <span class="variable">$NAME</span></span><br></pre></td></tr></table></figure>
<p><strong>当前选择的profile</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ karabiner selected</span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure>
<p><strong>当前选择的profile name</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ karabiner list | grep <span class="string">"^<span class="variable">$(karabiner selected)</span>"</span></span><br></pre></td></tr></table></figure>
<p>同时此命令行工具还支持 <code>export</code>, <code>reloadxml</code>, <code>relaunch</code>, <code>删除profile</code>, <code>rename profile</code>, 等..</p>
<h3 id="通过karabiner_设置热键来切换">通过karabiner 设置热键来切换</h3><p>以下为定义, 写入到private.xml的root标签中. 之后reload xml. 可以通过preferences界面也可以通过命令行<code>karabiner reloadxml</code></p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="title">vkopenurldef</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">name</span>&gt;</span>KeyCode::VK_OPEN_URL_SHELL_switchprofile_newitem<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">url</span> <span class="attribute">type</span>=<span class="value">"shell"</span>&gt;</span></span><br><span class="line">        <span class="cdata">&lt;![CDATA[    /Applications/Karabiner.app/Contents/Library/bin/karabiner select_by_name Poker2    ]]&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="title">url</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">vkopenurldef</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="title">item</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">name</span>&gt;</span>Switch Profile to NewItem with F4<span class="tag">&lt;/<span class="title">name</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">identifier</span>&gt;</span>private.switch1<span class="tag">&lt;/<span class="title">identifier</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="title">autogen</span>&gt;</span></span><br><span class="line">        __KeyToKey__</span><br><span class="line">        KeyCode::SHIFT_L,</span><br><span class="line">        KeyCode::SHIFT_L,</span><br><span class="line">        KeyCode::VK_OPEN_URL_SHELL_switchprofile_newitem</span><br><span class="line">    <span class="tag">&lt;/<span class="title">autogen</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="title">item</span>&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Karabiner 提供了一个命令行工具来方便脚本编程， 一般这个命令行工具在安装包的bin目录下， 具体地址为: <code>/Applications/Karabiner.app/Contents/Library/bin/karabiner</code> </p>
<h]]>
    </summary>
    
      <category term="Karabiner" scheme="http://omem.me/tags/Karabiner/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[企业级翻墙服务部署文档]]></title>
    <link href="http://omem.me/2016/04/13/offices-proxy-install-document/"/>
    <id>http://omem.me/2016/04/13/offices-proxy-install-document/</id>
    <published>2016-04-13T02:35:45.000Z</published>
    <updated>2016-04-13T02:44:56.000Z</updated>
    <content type="html"><![CDATA[<p>写在前面, 翻墙后仅资料查询或学术研究. 之前有说过翻墙方案： <a href="/2015/11/06/offices-proxy/">企业级翻墙方案</a></p>
<h2 id="思考工作">思考工作</h2><p>翻墙主要的技术有VPN和代理， 但是VPN在去年政策出了后正常使用需要备案， 所以VPN肯定是不推荐。 其次是代理， 个人代理最多用的是shadowsocks, shadowsocks不支持集中认证， 所以不考虑. squid支持ldap集中认证， 但是要考虑加密工作, 随着墙的升级, 越来越多的手段都被禁止或者被干扰. 所以加密一定要做的， 这里采用了Stunnel进行加密.其次是网站过滤, 一些视频网站控制住. 这里用PAC文件来控制， 有些人懂一些网络基础直接连接端口进行全局proxy也不是不可能的。 这个地方可以通过squid的ACL来控制.关于ACL本文不会描述 ， 请自行查阅squid文档.</p>
<h2 id="环境">环境</h2><p><strong>硬件环境</strong></p>
<ul>
<li>墙外VPS 若干(国外需要网络自由)</li>
<li>墙内VPS (Stunnel分流机器, 带宽要足够)</li>
</ul>
<p><strong>软件环境</strong></p>
<ul>
<li><code>Squid</code> 是一种用来缓冲Internet数据的软件。在这里仅仅使用它的代理功能.</li>
<li><code>Stunnel</code> 是一个自由的跨平台软件，用于提供全局的<code>TLS/SSL</code>服务。针对本身无法进行TLS或SSL通信的客户端及服务器，Stunnel可提供安全的加密连接。这里我们在墙内VPS和墙外VPS中间通信中间加个加密通道， 所以需要双向安装， 墙外的为服务端墙内分流为客户端.</li>
<li><code>LDAP Server</code>（这里没有安装介绍）</li>
</ul>
<h2 id="安装">安装</h2><h3 id="墙外VPS">墙外VPS</h3><p><strong>墙外VPS</strong>需要安装Stunnel 服务端和Squid服务端.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install stunnel </span><br><span class="line">$ yum -y install squid</span><br></pre></td></tr></table></figure>
<h4 id="配置stunnel_-_生成pem">配置stunnel - 生成pem</h4><p><strong>pem可以生成一份， 所有机器通用</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ <span class="built_in">cd</span> /etc/stunnel/;</span><br><span class="line">$ openssl req -new -x509 -days <span class="number">365</span> -nodes -out stunnel.pem -keyout stunnel.pem</span><br><span class="line"></span><br><span class="line"><span class="comment"># 接着给它生成Diffie-Hellman部分</span></span><br><span class="line">$ openssl gendh <span class="number">512</span>&gt;&gt; stunnel.pem</span><br></pre></td></tr></table></figure>
<h4 id="配置stunnel_-_配置Stunnel-conf">配置stunnel -  配置Stunnel.conf</h4><p>配置文件: <code>/etc/stunnel/stunnel.conf</code></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">cert = <span class="value">/etc/stunnel/stunnel.pem</span></span></span><br><span class="line"><span class="setting">CAfile = <span class="value">/etc/stunnel/stunnel.pem</span></span></span><br><span class="line"><span class="setting">socket = <span class="value">l:TCP_NODELAY=<span class="number">1</span></span></span></span><br><span class="line"><span class="setting">socket = <span class="value">r:TCP_NODELAY=<span class="number">1</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="setting">pid = <span class="value">/tmp/stunnel.pid</span></span></span><br><span class="line"><span class="setting">verify = <span class="value"><span class="number">3</span></span></span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="setting">setuid = <span class="value">stunnel</span></span></span><br><span class="line"><span class="setting">setgid = <span class="value">stunnel</span></span></span><br><span class="line"></span><br><span class="line"><span class="setting">compression = <span class="value">zlib</span></span></span><br><span class="line"><span class="setting">delay = <span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">sslVersion = <span class="value">TLSv1</span></span></span><br><span class="line"><span class="setting">fips=<span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"></span><br><span class="line"><span class="setting">debug = <span class="value"><span class="number">7</span></span></span></span><br><span class="line"><span class="setting">syslog = <span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">output = <span class="value">stunnel.log</span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[sproxy]</span></span><br><span class="line"><span class="setting">accept = <span class="value"><span class="number">34567</span></span></span></span><br><span class="line"><span class="setting">connect = <span class="value"><span class="number">127.0</span>.<span class="number">0.1</span>:<span class="number">10801</span></span></span></span><br></pre></td></tr></table></figure>
<p>以上这是stunnel 服务端的配置， cert、CAfile指定刚刚生成的pem， 后面的[sproxy] 可以指定一组对应，sproxy可以多个， 单服务端不需要一台机器只有一个squid所以只写一组. accept 表示转发的端口， connect表示映射端口， 也就是squid的端口这里是10801， 默认为3128.</p>
<h4 id="启动">启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ service squid start</span><br><span class="line">$ stunnel</span><br></pre></td></tr></table></figure>
<h3 id="配置squid_-_配置squid-conf">配置squid - 配置squid.conf</h3><figure class="highlight livescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">... 以下为修改， 也可以不修改， 选择默认， 上面的connect需要写成<span class="number">3128</span></span><br><span class="line">http_port <span class="number">10801</span></span><br><span class="line"></span><br><span class="line">... 以下为添加</span><br><span class="line">auth_param basic program <span class="pi">/usr/lib64/squid/squid_ldap_auth -u -cn -f "uid=%s" -b "ou=people,dc=shuyun,dc=com" -D "cn=proxy proxy,ou=people,dc=shuyun,dc=com" -w "Shuyun123456"  -H ldap:/</span>/ldap.shuyun.com   <span class="comment"># ldap 配置</span></span><br><span class="line">auth_param basic realm Please enter the wiki user <span class="keyword">and</span> password ＃ 认证提示</span><br><span class="line">auth_param basic credentialsttl <span class="number">8</span> hours ＃ 认证过期时间</span><br><span class="line">auth_param basic casesensitive <span class="literal">off</span>   </span><br><span class="line">acl ldapauth proxy_auth REQUIRED</span><br><span class="line">http_access allow ldapauth ＃ 默认允许ldap认证过的</span><br><span class="line">http_access deny all ＃ 拒绝其他所有</span><br><span class="line">acl rejectfile  urlpath_regex -i <span class="string">\.avi$</span> <span class="string">\.rmvb$</span> <span class="string">\.wmv$</span> <span class="string">\.rm$</span> <span class="string">\.mpg$</span> <span class="string">\.mpeg$</span> <span class="string">\.mp4$</span> <span class="string">\.mov$</span> <span class="string">\.asf$</span> <span class="string">\.mkv$</span> <span class="string">\.dat$</span> <span class="string">\.flv$</span> <span class="string">\.3gp$</span> <span class="string">\.mp3$</span></span><br><span class="line">http_access deny rejectfile ＃ 拒绝视频文件</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong>  http_access 语句配置完成后应该只有上面的三个， 安装<strong>Squid默认的配置文件里面的http_access 语句需要注视掉</strong>， 否则ldapauth 会不生效， 因为默认是没有认证的。<code>http_access allow all</code> 这一句就允许所有了…</p>
<p><strong>注意:</strong>  如果有多台墙外VPS的话重复上面的步骤, pem 可以直接复制到备份机器. 下面stunnel client可以复制这个pem.</p>
<p>到这里服务端的配置就完成了， 下面开始分流机器的配置</p>
<h3 id="墙内分流VPS">墙内分流VPS</h3><p><strong>墙内分流VPS</strong>需要安装Stunnel 软件作为客户端.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ yum -y install stunnel</span><br></pre></td></tr></table></figure>
<h3 id="配置Stunnel_-_复制pem">配置Stunnel - 复制pem</h3><p>复制刚刚生成pem那台服务器的pem文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ scp root@$墙外VPS:/etc/stunnel/stunnel.pem /etc/stunnel/stunnel.pem</span><br></pre></td></tr></table></figure>
<h3 id="配置Stunnel_-_配置stunnel-conf">配置Stunnel - 配置stunnel.conf</h3><p>配置文件: <code>/etc/stunnel/stunnel.conf</code></p>
<figure class="highlight ini"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="setting">cert = <span class="value">/etc/stunnel/stunnel.pem</span></span></span><br><span class="line"><span class="setting">CAfile = <span class="value">/etc/stunnel/stunnel.pem</span></span></span><br><span class="line"><span class="setting">socket = <span class="value">l:TCP_NODELAY=<span class="number">1</span></span></span></span><br><span class="line"><span class="setting">socket = <span class="value">r:TCP_NODELAY=<span class="number">1</span></span></span></span><br><span class="line"><span class="setting">verify = <span class="value"><span class="number">2</span></span></span></span><br><span class="line"><span class="setting">client=<span class="value"><span class="keyword">yes</span>  # 这里指明当前服务为客户端， 默认是服务端(<span class="keyword">no</span>).</span></span></span><br><span class="line"><span class="setting">compression = <span class="value">zlib</span></span></span><br><span class="line"><span class="setting">ciphers = <span class="value">AES256-SHA</span></span></span><br><span class="line"><span class="setting">delay = <span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">failover = <span class="value">prio</span></span></span><br><span class="line"><span class="setting">sslVersion = <span class="value">TLSv1</span></span></span><br><span class="line"><span class="setting">fips = <span class="value"><span class="keyword">no</span></span></span></span><br><span class="line"><span class="setting">debug = <span class="value">debug</span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[sproxy2]</span></span><br><span class="line"><span class="setting">accept  = <span class="value"><span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">7072</span></span></span></span><br><span class="line"><span class="setting">connect = <span class="value">$墙内vps1:<span class="number">34567</span></span></span></span><br><span class="line"><span class="title"></span><br><span class="line">[sproxy2]</span></span><br><span class="line"><span class="setting">accept  = <span class="value"><span class="number">0.0</span>.<span class="number">0.0</span>:<span class="number">7073</span></span></span></span><br><span class="line"><span class="setting">connect = <span class="value">$墙内vps2:<span class="number">34567</span></span></span></span><br></pre></td></tr></table></figure>
<h4 id="启动-1">启动</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ stunnel</span><br></pre></td></tr></table></figure>
<p>这里所有的配置均已完成， 测试的话，可以在浏览器设置里面设置</p>
<p>Windows: windows键+R键输入inetcpl.cpl &gt; 连接 &gt; 局域网设置 &gt; 代理服务器<br>MAC: 系统设置 &gt; 网络 &gt; &lt;选择所用网络&gt; &gt; 高级 &gt; 代理 &gt; WEB 代理(HTTP) &gt; 输入地址端口用户名密码.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>写在前面, 翻墙后仅资料查询或学术研究. 之前有说过翻墙方案： <a href="/2015/11/06/offices-proxy/">企业级翻墙方案</a></p>
<h2 id="思考工作">思考工作</h2><p>翻墙主要的技术有VPN和代理， 但是VPN在去年政策]]>
    </summary>
    
      <category term="Squid" scheme="http://omem.me/tags/Squid/"/>
    
      <category term="Stunnel" scheme="http://omem.me/tags/Stunnel/"/>
    
      <category term="vps" scheme="http://omem.me/tags/vps/"/>
    
      <category term="翻墙" scheme="http://omem.me/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Google photos for MAC使用教程]]></title>
    <link href="http://omem.me/2016/04/12/google-photos-for-mac/"/>
    <id>http://omem.me/2016/04/12/google-photos-for-mac/</id>
    <published>2016-04-12T03:41:17.000Z</published>
    <updated>2016-04-12T03:45:02.000Z</updated>
    <content type="html"><![CDATA[<p>Google photos 是谷歌推出了一个独立的无限相片 / 视频存放服务。使用者可以免费存放无限量相片和视频至云端，唯其大小限于最大 16MP 和 1080p。而且客户端可以设置是否对图片进行压缩， 所以大的图片也不会占用google drive的空间。</p>
<p>安卓手机上面使用shadowsocks 可以正常登陆和备份照片 ， 此处略。</p>
<p>但是mac 上使用shadowsocks是不行的， 貌似有一些连接不支持socks协议。就在刚刚折腾了VPN死活出错， 最后放弃。 于是又折腾了hosts， 这个比较好弄。</p>
<p>首先获取最新hosts文件， 向维护作者致敬</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">clone</span> https://github.com/racaljk/hosts</span><br></pre></td></tr></table></figure>
<p>然后追加到/etc/hosts文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要root权限, 第一步请输入提权密码。 </span></span><br><span class="line">sudo <span class="variable">$SHELL</span></span><br><span class="line">cat hosts/hosts &gt;&gt; /etc/hosts</span><br><span class="line"><span class="built_in">exit</span></span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Google photos 是谷歌推出了一个独立的无限相片 / 视频存放服务。使用者可以免费存放无限量相片和视频至云端，唯其大小限于最大 16MP 和 1080p。而且客户端可以设置是否对图片进行压缩， 所以大的图片也不会占用google drive的空间。</p>
<p>]]>
    </summary>
    
      <category term="Google" scheme="http://omem.me/tags/Google/"/>
    
      <category term="病" scheme="http://omem.me/tags/%E7%97%85/"/>
    
      <category term="翻墙" scheme="http://omem.me/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[大话西游答题器 command line]]></title>
    <link href="http://omem.me/2016/01/15/dhxy-examination-command-line/"/>
    <id>http://omem.me/2016/01/15/dhxy-examination-command-line/</id>
    <published>2016-01-15T01:55:15.000Z</published>
    <updated>2016-01-15T06:52:13.000Z</updated>
    <content type="html"><![CDATA[<p>科举，大理寺都适用。 唯独不支持的是殿试。</p>
<h2 id="项目代吗">项目代吗</h2><p>需要依赖<a href="http://docs.python-requests.org/en/latest/" target="_blank" rel="external">requests</a></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install requests</span><br></pre></td></tr></table></figure>
<p>然后保存下列代码到一个python文件(如: <code>search.py</code>)</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">File Name: search.py</span><br><span class="line">Author: JackeyGao</span><br><span class="line">mail: junqi.gao@shuyun.com</span><br><span class="line">Created Time: 三  1/13 11:12:32 2016</span><br><span class="line">'''</span></span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> readline</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line">readline.parse_and_bind(<span class="string">'tab: complete'</span>)</span><br><span class="line">readline.parse_and_bind(<span class="string">'set editing-mode vi'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_wrap_with_code</span><span class="params">(code)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">inner</span><span class="params">(text, bold=False)</span>:</span></span><br><span class="line">        c = code</span><br><span class="line">        <span class="keyword">if</span> bold:</span><br><span class="line">            c = <span class="string">"1;%s"</span> % c</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"\033[%sm%s\033[0m"</span> % (c, text)</span><br><span class="line">    <span class="keyword">return</span> inner</span><br><span class="line"></span><br><span class="line">red = _wrap_with_code(<span class="string">'31'</span>)</span><br><span class="line">green = _wrap_with_code(<span class="string">'32'</span>)</span><br><span class="line">blue = _wrap_with_code(<span class="string">'34'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">categorys = (</span><br><span class="line">        <span class="string">''</span>,</span><br><span class="line">        <span class="string">'乡试'</span>,</span><br><span class="line">        <span class="string">'省试-地理'</span>,</span><br><span class="line">        <span class="string">'省试-文学'</span>,</span><br><span class="line">        <span class="string">'省试-常识'</span>,</span><br><span class="line">        <span class="string">'省试-饮食'</span>,</span><br><span class="line">        <span class="string">'省试-历史'</span>,</span><br><span class="line">        <span class="string">'大话常识'</span></span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    category = sys.argv[<span class="number">1</span>]</span><br><span class="line">    <span class="keyword">if</span> category <span class="keyword">not</span> <span class="keyword">in</span> categorys:</span><br><span class="line">        <span class="keyword">raise</span> Exception()</span><br><span class="line"><span class="keyword">except</span> IndexError <span class="keyword">as</span> e:</span><br><span class="line">    category = <span class="string">''</span></span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    sys.stdout.write(red(<span class="string">"CategoryError:\n无效的科目'%s',支持:(%s, ''(所有))\n"</span> \</span><br><span class="line">            % (category, <span class="string">','</span>.join(categorys))))</span><br><span class="line">    exit()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(collect, query)</span>:</span></span><br><span class="line">    url = <span class="string">"http://xy2-tiku.webapp.163.com/tiku/search"</span></span><br><span class="line">    params = &#123; <span class="string">"q"</span>: query &#125;</span><br><span class="line">    <span class="keyword">if</span> collect:</span><br><span class="line">        params[<span class="string">"c"</span>] = collect</span><br><span class="line"></span><br><span class="line">    headers = &#123;</span><br><span class="line">            <span class="string">"Content-Type"</span>: <span class="string">"application/json"</span>,</span><br><span class="line">            <span class="string">"Accept-Language"</span>: <span class="string">"zh-CN,zh;q=0.8,en;q=0.6"</span>,</span><br><span class="line">            <span class="string">"Connection"</span>: <span class="string">"keep-alive"</span>,</span><br><span class="line">            <span class="string">"Referer"</span>: <span class="string">"http://dhxy.163.com/"</span></span><br><span class="line">            &#125;</span><br><span class="line">    response = requests.get(</span><br><span class="line">            url,</span><br><span class="line">            params=params,</span><br><span class="line">            headers=headers</span><br><span class="line">            )</span><br><span class="line">    <span class="keyword">return</span> response.json()</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(data)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> q <span class="keyword">in</span> data[<span class="string">"data"</span>]:</span><br><span class="line">        sys.stdout.write(<span class="string">"- [%s] "</span> % q[<span class="string">"category"</span>] + blue(q[<span class="string">"question"</span>]) + <span class="string">'\n'</span>)</span><br><span class="line">        sys.stdout.write(<span class="string">"&gt; "</span> + green(<span class="string">','</span>.join(q[<span class="string">"answers"</span>])) + <span class="string">'\n'</span>)</span><br><span class="line">        sys.stdout.write(<span class="string">"\n"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">signal_handler</span><span class="params">(signal, frame)</span>:</span></span><br><span class="line">    sys.stdout.write(red(<span class="string">'\nYou pressed Ctrl+C! 答题终止.\n'</span>))</span><br><span class="line">    sys.exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">signal.signal(signal.SIGINT, signal_handler)</span><br><span class="line"><span class="keyword">while</span> <span class="keyword">True</span>:</span><br><span class="line">    collect = category <span class="keyword">or</span> <span class="string">'所有'</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        keyword = raw_input(<span class="string">"[%s]输入关键字(终止Ctrl+C): "</span> % red(collect))</span><br><span class="line">        show(request(category, keyword))</span><br><span class="line">    <span class="keyword">except</span> EOFError:</span><br><span class="line">        print(red(<span class="string">"\n快捷键错误, 使用Ctrl+C 退出."</span>))</span><br></pre></td></tr></table></figure>
<h2 id="使用方式">使用方式</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ python search.py <span class="variable">$CATEGORY</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># CATEGORY 可以为空为空则为所有科目</span></span><br><span class="line"><span class="comment"># CATEGORY 支持(乡试,省试-地理,省试-文学,省试-常识,省试-饮食,省试-历史,大话常识, ''(所有))</span></span><br></pre></td></tr></table></figure>
<p><img src="/uploads/images/QQ20160115-1.png" alt="使用截图"></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>科举，大理寺都适用。 唯独不支持的是殿试。</p>
<h2 id="项目代吗">项目代吗</h2><p>需要依赖<a href="http://docs.python-requests.org/en/latest/" target="_blank" rel="externa]]>
    </summary>
    
      <category term="游戏" scheme="http://omem.me/tags/%E6%B8%B8%E6%88%8F/"/>
    
      <category term="病" scheme="http://omem.me/tags/%E7%97%85/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Scrapy抓取简书热门生成电子书发送到Kindle]]></title>
    <link href="http://omem.me/2016/01/14/jianshuhot/"/>
    <id>http://omem.me/2016/01/14/jianshuhot/</id>
    <published>2016-01-14T08:31:14.000Z</published>
    <updated>2016-01-14T08:38:36.000Z</updated>
    <content type="html"><![CDATA[<p><a href="http://www.jianshu.com" target="_blank" rel="external">简书</a>是个学习的好网站， 我大多只关注首页上的人们文章， 但是最近因为忙错过了很多首页上的文章，所以有了想法把每天的热门top生成mobi推送到kindle。这样在地铁上也能快速翻完. </p>
<p>环境准备:</p>
<ul>
<li>一台主机(需要联网)</li>
<li>Gitbook</li>
<li>calibre(Gitbook 依赖calibre的<code>ebook-convert</code>)</li>
<li>Python2.7.9(calibre 需要<code>python2.7.9</code>)</li>
<li>项目地址:  <strong><a href="https://github.com/jackeyGao/jianshuHot" target="_blank" rel="external">jianshuHot</a></strong></li>
</ul>
<h2 id="关于calibre安装">关于calibre安装</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -v &amp;&amp; wget -nv -O- https://raw.githubusercontent.com/kovidgoyal/calibre/master/setup/linux-installer.py | sudo python -c <span class="string">"import sys; main=lambda:sys.stderr.write('Download failed\n'); exec(sys.stdin.read()); main()"</span></span><br></pre></td></tr></table></figure>
<p>官网文档提供的安装脚本看似简单， 执行之后也可以安装使用了， 但是gitbook调用<code>ebook-convert</code>时候会报错， 这个地方报错应该是QT的错误(至少我遇到的是, 具体错误信息忘记截图了)如果遇到此错误直接安装QT pyQT即可. <a href="http://calibre-ebook.com/download_linux" target="_blank" rel="external">calibre 安装页面</a>有依赖表</p>
<h2 id="Gitbook_安装">Gitbook 安装</h2><p>需要安装<code>nodejs</code>和<code>npm</code>然后执行<code>npm install -g gitbook-cli</code></p>
<h2 id="安装jianshuHot">安装jianshuHot</h2><p>需要强调的是此部分需要解决大量的依赖,</p>
<p><strong><code>scrapy</code></strong>所依赖的python包很多， 而且这些依赖的python大多需要一些系统库， 必要的时候需要<code>apt-get</code>、<code>yum</code>安装一下, 如<code>python-devel</code> <code>libffi-devel</code> <code>libxml-devel</code>等….</p>
<p><strong><code>peewee</code></strong> (数据库ORM)要<code>mysql-devel</code>， 以上举例都是已知的， 这是在我部署之后写的， 部署的过程没有详细记录， 现在只能靠回忆来写本章节.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">clone</span> https://github.com/jackeyGao/jianshuHot</span><br><span class="line">$ <span class="built_in">cd</span> jianshuHot</span><br><span class="line">$ pip install -r requirements.txt</span><br></pre></td></tr></table></figure>
<h2 id="初始化程序">初始化程序</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh init.sh</span><br></pre></td></tr></table></figure>
<h2 id="邮件配置">邮件配置</h2><p>这里发送邮件使用的<a href="http://caspian.dotconf.net/menu/Software/SendEmail/" target="_blank" rel="external">sendEmail</a>, <a href="http://caspian.dotconf.net/menu/Software/SendEmail/" target="_blank" rel="external">下载地址</a> . 解压后把解压的<code>sendEmail</code>重命名到<code>/usr/local/bin/sendEmail</code>理论上都能安装成功， 这个是免编译的， 只需要机器上安装了<code>perl</code></p>
<p>然后修改start.sh 邮箱配置， 写成你自己163邮箱， 也可以用其他品牌邮箱， 如果你用其他品牌别忘了改下<code>smtp.163.com</code>, 改成相应的smtp服务器即可.</p>
<p><strong>注意:</strong> 无论你用哪个邮箱都必须把此邮箱账号加入亚马逊<strong><code>已认可的发件人电子邮箱列表</code></strong>， 确保发送的文档能到达亚马逊Cloud</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ vim start.sh</span><br><span class="line">....</span><br><span class="line">YOURKINDLE_MAIL_ADDRESS=<span class="string">"xxxxx@kindle.cn"</span></span><br><span class="line">YOUR_SEND_MAIL_USERNAME=<span class="string">"xxxx@163.com"</span></span><br><span class="line">YOUR_SEND_MAIL_SECRET = <span class="string">'xxxxxxxxxxxx'</span></span><br><span class="line">MOBI_BOOK_PATH=<span class="string">'./output/book.mobi'</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<h2 id="开始抓取生成">开始抓取生成</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sh start.sh</span><br></pre></td></tr></table></figure>
<p>执行后会自动抓取页面生成markdown， 下载每个文章的图片， 然后gitbook通过markdown生成此次文档列表的<code>book.mobi</code> (output/book.mobi), 在start.sh 最后面有个备份的操作， 会把此次的mobi备份到<code>output/books</code>. 然后发送到指定的kindle地址邮箱.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><a href="http://www.jianshu.com" target="_blank" rel="external">简书</a>是个学习的好网站， 我大多只关注首页上的人们文章， 但是最近因为忙错过了很多首页上的文章，所以有了想法把每天的热门top生成mobi推]]>
    </summary>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
      <category term="Scrapy" scheme="http://omem.me/tags/Scrapy/"/>
    
      <category term="病" scheme="http://omem.me/tags/%E7%97%85/"/>
    
      <category term="Python" scheme="http://omem.me/categories/Python/"/>
    
      <category term="折腾" scheme="http://omem.me/categories/Python/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Python生态圈]]></title>
    <link href="http://omem.me/2015/11/26/python-environment/"/>
    <id>http://omem.me/2015/11/26/python-environment/</id>
    <published>2015-11-26T06:33:53.000Z</published>
    <updated>2015-11-27T03:00:35.000Z</updated>
    <content type="html"><![CDATA[<h2 id="版本">版本</h2><ul>
<li>python2.6(不推荐)</li>
<li>python2.7</li>
<li>python3.0(强力推荐)</li>
</ul>
<h2 id="PYTHONPATH变量">PYTHONPATH变量</h2><p><code>PYTHONPATH</code>是一个可以用来增强默认包检索路径的环境变量</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PYTHONPATH=/path/to/some/directory:/path/to/another/directory:/path/to/yet/another/directory</span><br></pre></td></tr></table></figure>
<p>在某些情况下，你不用覆盖已有的PYTHONPATH，只需要在开头或结尾加上新的路径即可。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">export</span> PYTHONPATH=<span class="variable">$PYTHONPATH</span>:/path/to/some/directory    <span class="comment"># 追加</span></span><br><span class="line"><span class="built_in">export</span> PYTHONPATH=/path/to/some/directory:<span class="variable">$PYTHONPATH</span>    <span class="comment"># 覆盖</span></span><br></pre></td></tr></table></figure>
<p>同时在python代码里面也可以使用<code>sys.path.insert</code>来动态添加搜索路径. 无论是通过环境变量<code>PYTHONPATH</code>还是通过<code>sys.path.insert</code>都不建议你这样做. 按照python规范好的路径来开发不然维护性要加大.</p>
<h2 id="第三方包">第三方包</h2><p>在Linux系统上，至少有3种安装第三方包的方法。</p>
<ul>
<li>使用系统本身自带的包管理器（deb, rpm等）</li>
<li>通过社区开发的类似pip, easy_install等多种工具</li>
<li>从源文件安装</li>
</ul>
<p>三种方法都会安装所需的依赖包, 并处理好依赖程序, 同时遵守python的搜索路径.</p>
<h3 id="如果找到合适的包">如果找到合适的包</h3><ul>
<li>你使用的系统自带的包管理器</li>
<li><a href="http://pypi.python.org/pypi" target="_blank" rel="external">Python包索引（也被称为PyPI）</a></li>
<li>源码托管服务，如Launchpad， Github， Bitbucket等。</li>
<li>必要时候进行搜索</li>
</ul>
<h3 id="非root_pip安装权限问题">非root pip安装权限问题</h3><p>当没有root权限是不能在系统层面安装python包的, 这时候可以采取<strong>虚拟环境的方式</strong>或者加入<code>--user</code>参数。</p>
<p>默认python的搜索路径里有宿主目录下的<code>~/.local/lib/python2.7/site-packages</code>目录, <code>--user</code>参数的作用也就是安装到这个路径里面.</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>print(sys.path)</span><br><span class="line">[<span class="string">''</span>, <span class="string">'/home/monitor/.local/lib/python2.7/site-packages'</span>, ...略..]</span><br></pre></td></tr></table></figure>
<p>当然也可以在root环境下安装<code>virtualenv</code> 下节讲</p>
<h2 id="virtualenv_虚拟环境">virtualenv 虚拟环境</h2><p>Python社区中设置开发环境的最受欢迎的方法，是通过virtualenv。Virtualenv是一个用于创建孤立Python环境的工具。那么现在问题来了：为什么我们需要孤立的Python环境？要回答这个问题，请允许我引用virtualenv的官方文档。</p>
<blockquote>
<p>我们要解决的问题之一，就是依赖包和版本的管理问题，以及间接地解决权限问题。假设你有一个应用需要使用LibFoo V1，但是另一个应用需要V2。那么你如何使用两个应用呢？如果你把需要的包都安装在/usr/lib/python2.7/site-packages（或是你的系统默认路径），很容易就出现你不小心更新了不应该更新的应用。</p>
</blockquote>
<p>简单来说，你的每一个项目都可以拥有一个单独的、孤立的Python环境；你可以把所需的包安装到各自孤立的环境中。</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pip install virtualenv</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$ mkdir my_env</span><br><span class="line">$ <span class="built_in">cd</span> my_env/</span><br><span class="line">$ virtualenv .</span><br><span class="line">New python executable <span class="keyword">in</span> ./bin/python</span><br><span class="line">Installing setuptools, pip...done.</span><br><span class="line">$ ls -al</span><br><span class="line">总用量 <span class="number">20</span></span><br><span class="line">drwxrwxr-x  <span class="number">5</span> monitor monitor <span class="number">4096</span> <span class="number">11</span>月 <span class="number">26</span> <span class="number">13</span>:<span class="number">56</span> .</span><br><span class="line">drwx------ <span class="number">10</span> monitor monitor <span class="number">4096</span> <span class="number">11</span>月 <span class="number">26</span> <span class="number">13</span>:<span class="number">56</span> ..</span><br><span class="line">drwxrwxr-x  <span class="number">2</span> monitor monitor <span class="number">4096</span> <span class="number">11</span>月 <span class="number">26</span> <span class="number">13</span>:<span class="number">56</span> bin</span><br><span class="line">drwxrwxr-x  <span class="number">2</span> monitor monitor <span class="number">4096</span> <span class="number">11</span>月 <span class="number">26</span> <span class="number">13</span>:<span class="number">56</span> include</span><br><span class="line">drwxrwxr-x  <span class="number">3</span> monitor monitor <span class="number">4096</span> <span class="number">11</span>月 <span class="number">26</span> <span class="number">13</span>:<span class="number">56</span> lib</span><br><span class="line">lrwxrwxrwx  <span class="number">1</span> monitor monitor    <span class="number">3</span> <span class="number">11</span>月 <span class="number">26</span> <span class="number">13</span>:<span class="number">56</span> lib64 -&gt; lib</span><br></pre></td></tr></table></figure>
<h3 id="进入虚拟环境">进入虚拟环境</h3><p>进入环境后终端的提示符, 会有关于所在虚拟环境的标示, 这里我的标示就是<code>my_env</code></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[monitor@localhost]$ <span class="built_in">source</span> bin/activate</span><br><span class="line">(my_env)[monitor@localhost]$</span><br></pre></td></tr></table></figure>
<p>到了这里， 使用pip安装都会安装到<code>./lib/python2.7/site-packages/</code>里面， 可以看下我们使用的pip命令和python命令位置, 已经完全和系统的python环境分离. 甚至可以看到python的搜索路径.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">(my_env)[monitor@localhost]$ <span class="built_in">which</span> pip</span><br><span class="line">~/my_env/bin/pip </span><br><span class="line">(my_env)[monitor@localhost]$ <span class="built_in">which</span> python</span><br><span class="line">~/my_env/bin/python</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="prompt">&gt;&gt;&gt; </span><span class="keyword">import</span> sys</span><br><span class="line"><span class="prompt">&gt;&gt;&gt; </span>sys.path</span><br><span class="line">[<span class="string">''</span>, <span class="string">'/home/monitor/my_env/lib64/python27.zip'</span>, <span class="string">'/home/monitor/my_env/lib64/python2.7'</span>, <span class="string">'/home/monitor/my_env/lib64/python2.7/plat-linux2'</span>, <span class="string">'/home/monitor/my_env/lib64/python2.7/lib-tk'</span>, <span class="string">'/home/monitor/my_env/lib64/python2.7/lib-old'</span>, <span class="string">'/home/monitor/my_env/lib64/python2.7/lib-dynload'</span>, <span class="string">'/usr/lib64/python2.7'</span>, <span class="string">'/usr/lib/python2.7'</span>, <span class="string">'/home/monitor/my_env/lib/python2.7/site-packages'</span>]</span><br><span class="line">&gt;&gt;&gt;</span><br></pre></td></tr></table></figure>
<h3 id="退出虚拟环境">退出虚拟环境</h3><p>如果需要回到系统环境</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(my_env)[monitor@localhost]$ deactivate</span><br><span class="line">[monitor@localhost]$</span><br></pre></td></tr></table></figure>
<h3 id="默认虚拟环境里面可以使用系统环境的包">默认虚拟环境里面可以使用系统环境的包</h3><p><strong>注意:</strong>系统Python环境中安装的所有包，默认是可以在虚拟环境中调用的。这意味着，如果你在系统环境中安装了simplejson包，那么所有的虚拟环境将自动获得这个包的地址。你可以在创建虚拟环境时，通过添加<code>--no-site-packages</code>选项，取消这个行为，就像这样：</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[monitor@localhost]$ virtualenv . --no-site-packages</span><br></pre></td></tr></table></figure>
<h3 id="virtualenvwrapper">virtualenvwrapper</h3><p><code>virtualenvwrapper</code>是virtualenv 封装后的工具集</p>
<p><strong>安装</strong></p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[monitor@localhost]$ sudo pip install virtualenvwrapper</span><br></pre></td></tr></table></figure>
<p>安装后此工具提供这个bash 方法文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">virtualenvwrapper                            virtualenvwrapper_setup_tab_completion</span><br><span class="line">virtualenvwrapper_absolutepath               virtualenvwrapper.sh</span><br><span class="line">virtualenvwrapper_<span class="built_in">cd</span>                         virtualenvwrapper_show_workon_options</span><br><span class="line">virtualenvwrapper_derive_workon_home         virtualenvwrapper_tempfile</span><br><span class="line">virtualenvwrapper_expandpath                 virtualenvwrapper_verify_active_environment</span><br><span class="line">virtualenvwrapper_get_python_version         virtualenvwrapper_verify_project_home</span><br><span class="line">virtualenvwrapper_get_site_packages_dir      virtualenvwrapper_verify_resource</span><br><span class="line">virtualenvwrapper_initialize                 virtualenvwrapper_verify_virtualenv</span><br><span class="line">virtualenvwrapper_lazy.sh                    virtualenvwrapper_verify_virtualenv_<span class="built_in">clone</span></span><br><span class="line">virtualenvwrapper_mkproject_<span class="built_in">help</span>             virtualenvwrapper_verify_workon_environment</span><br><span class="line">virtualenvwrapper_mktemp                     virtualenvwrapper_verify_workon_home</span><br><span class="line">virtualenvwrapper_mkvirtualenv_<span class="built_in">help</span>          virtualenvwrapper_workon_<span class="built_in">help</span></span><br><span class="line">virtualenvwrapper_run_hook</span><br></pre></td></tr></table></figure>
<p>其实需要用到的就一个<code>virtualenvwrapper.sh</code>，  所有封装好的工具都是此bash脚本里面的函数, 所以我们要使用必须要<code>source</code>加载一下,找到它的位置, 加到<code>~/.bashrc</code> 里面每次进入系统自动加载. </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="operator">-e</span> <span class="string">"\n# 加载虚拟环境工具集\nsource <span class="variable">$(which virtualenvwrapper.sh)</span>\n\n"</span> &gt;&gt; ~/.bashrc</span><br></pre></td></tr></table></figure>
<p>这样只要每次登陆系统就可以使用里面的工具集了, 这里说下<code>virtualenvwrapper</code>提供了哪些方法.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 创建虚拟环境</span></span><br><span class="line">mkvirtualenv my_env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入虚拟环境</span></span><br><span class="line">workon my_env</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出虚拟环境</span></span><br><span class="line">deactivate</span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除虚拟环境</span></span><br><span class="line">rmvirtualenv my_env</span><br></pre></td></tr></table></figure>
<p><strong>注意:</strong><code>mkvirtualenv</code>同时支持<code>virtualenv</code>参数， 所以前面讲的<code>--user</code>和<code>--no-site-packages</code>参数同时也会支持, 看到这里相信你知道这个工具只是对<code>virtualenv</code>做了封装了吧, 所以最好每次只需要安装<code>virtualenvwrapper</code>就行了， 依赖包<code>virtualenv</code>会自动安装.</p>
<h2 id="通过pip和virtualenv进行基本的依赖包管理">通过pip和virtualenv进行基本的依赖包管理</h2><p>virtualenv虚拟环境的确是开发环境的好东西， 但是不只是仅仅开发环境， 线上部署多应用的时候同样需要多虚拟环境同时存在. 如果我们在虚拟环境开发完了， 可以直接把依赖的包提取出来， 也就是打包的范畴了.   Python项目里都存在一个<code>requirements.txt</code>文件， 好像成了标准规范. 幸运的是<code>pip freeze</code>命令支持直接生成.</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">(my_env)[monitor@localhost]$ pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure>
<h2 id="编辑器推荐">编辑器推荐</h2><p>个人比较倾向vim， 还有支持自动补全的 PyCharm， 你应该选择最合适的编辑器.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="版本">版本</h2><ul>
<li>python2.6(不推荐)</li>
<li>python2.7</li>
<li>python3.0(强力推荐)</li>
</ul>
<h2 id="PYTHONPATH变量">PYTHONPATH变量</h2><p>]]>
    </summary>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
      <category term="pip" scheme="http://omem.me/tags/pip/"/>
    
      <category term="virtualenv" scheme="http://omem.me/tags/virtualenv/"/>
    
      <category term="Python" scheme="http://omem.me/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[动态切换代理 - PAC方法]]></title>
    <link href="http://omem.me/2015/11/24/dynamic-autochange-proxy/"/>
    <id>http://omem.me/2015/11/24/dynamic-autochange-proxy/</id>
    <published>2015-11-24T07:50:19.000Z</published>
    <updated>2015-11-24T08:43:26.000Z</updated>
    <content type="html"><![CDATA[<p>最近协助搭建了企业级翻墙系统， 由于没有现成的公司提供这些， 也没有成套比较成熟的方案(国外人用不着, 国内人不敢用的东西). 所以就自己摸索搭建而且也搭建了， 而且相对来说能控制. 可以参考这里<a href="http://omem.me/2015/11/06/offices-proxy/">企业级翻墙方案</a>. 随着很多用户的使用一台服务器显得力不从心, 所以又买了一台然后Squid ＋ Stunnel方案都配好正常启动了。 </p>
<h2 id="搞定负载均衡">搞定负载均衡</h2><p>PAC文件支持故障转移(比较坑, 这种机制比较坑， 我们基本上是避免采取的),比较头疼的是负载均衡, 又两种方案</p>
<ul>
<li>一种是通过负载均衡程序转发</li>
<li>通过随机PAC文件配置.</li>
</ul>
<p>前者的故障转移不好做, 因为客户端代理用的stunnel端口转发到squid端口, 如果stunnel端口依然存活而squid端口还在的话， 这种是转移不了的。然后PAC的故障转移坑的点也在这里. 所以只能不做采取. 后者是我们采取的方案， 开发一个web服务提供pac文件, 然后response的逻辑改下, 随机选择代理服务器生成pac. 这种方法测试一段时间之后能达到我们预期的效果.</p>
<p>负载均衡基于flask服务代码</p>
<p><strong>server.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">File Name: web.py</span><br><span class="line">Author: JackeyGao</span><br><span class="line">Created Time: 五 11/13 16:11:23 2015</span><br><span class="line">'''</span></span><br><span class="line"><span class="keyword">import</span> random, os, json</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> Flask</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> make_response</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> render_template</span><br><span class="line"><span class="keyword">from</span> flask <span class="keyword">import</span> request</span><br><span class="line"></span><br><span class="line">app = Flask(__name__)</span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">home</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'proxys.json'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        proxy_policy = json.loads(f.read())</span><br><span class="line">    <span class="keyword">return</span> render_template(<span class="string">"index.html"</span>, count=len(proxy_policy))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@app.route('/proxy.pac')</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">proxy</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'proxys.json'</span>, <span class="string">'r'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        proxy_policy = json.loads(f.read())</span><br><span class="line">    proxys = [ proxy <span class="keyword">for</span> proxy, pl <span class="keyword">in</span> proxy_policy <span class="keyword">for</span> n <span class="keyword">in</span> range(pl) ]</span><br><span class="line">    random.shuffle(proxys)</span><br><span class="line">    master = random.sample(proxys, <span class="number">1</span>)[<span class="number">0</span>]</span><br><span class="line">    sleve  = [ proxy <span class="keyword">for</span> proxy <span class="keyword">in</span> proxys <span class="keyword">if</span> proxy &lt;&gt; master ]</span><br><span class="line">    <span class="keyword">if</span> sleve:</span><br><span class="line">        proxy_list = <span class="string">"PROXY %s;PROXY %s;"</span> % (master, sleve[<span class="number">0</span>])</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        proxy_list = <span class="string">"PROXY %s;"</span> % master</span><br><span class="line"></span><br><span class="line">    response = make_response(render_template(<span class="string">'proxy.pac'</span>,</span><br><span class="line">        proxy_list=proxy_list))</span><br><span class="line">    response.mimetype = <span class="string">"text/plain"</span></span><br><span class="line">    <span class="keyword">return</span> response</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    port = int(os.environ.get(<span class="string">"PORT"</span>, <span class="number">5000</span>))</span><br><span class="line">    app.run(host=<span class="string">'0.0.0.0'</span>, port=port, debug=<span class="keyword">True</span>)</span><br></pre></td></tr></table></figure>
<h2 id="故障转移">故障转移</h2><p>前面已经提到PAC的故障转移是通过Stunnel端口的联通性作出判断的, 当stunnel端口存活而上游的squid端口不通的情况是不会自动转移的。 所以需要一个监控脚本去刷新整个过程的联通性然后把结果给上面的flask web pac服务使用. 这里使用一个reload.py 脚本搞定， 然后把reload.py 做成计划任务.</p>
<p><strong>reload.py</strong></p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">File Name: reload.py</span><br><span class="line">Author: JackeyGao</span><br><span class="line">Created Time: 二 11/24 13:09:20 2015</span><br><span class="line">'''</span></span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">proxy_configs = &#123;</span><br><span class="line">    <span class="string">'114.xxx.xx.xx:7072'</span>: &#123;</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'xxxxxx'</span>,</span><br><span class="line">        <span class="string">'passwd'</span>: <span class="string">'xxxxxxx'</span>,</span><br><span class="line">        <span class="string">'return'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'priority'</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    <span class="string">'114.xxx.xx.xx:7071'</span>: &#123;</span><br><span class="line">        <span class="string">'user'</span>: <span class="string">'xxxxxx'</span>,</span><br><span class="line">        <span class="string">'passwd'</span>: <span class="string">'xxxxxxxxx'</span>,</span><br><span class="line">        <span class="string">'return'</span>: <span class="string">'127.0.0.1'</span>,</span><br><span class="line">        <span class="string">'priority'</span>: <span class="number">1</span>,</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">request_error_handler</span><span class="params">(func)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_deco</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="keyword">return</span> func(*args, **kwargs)</span><br><span class="line">        <span class="keyword">except</span> requests.exceptions.ConnectionError <span class="keyword">as</span> e:</span><br><span class="line">            <span class="keyword">if</span> <span class="string">'407'</span> <span class="keyword">in</span> str(e):</span><br><span class="line">                print(<span class="string">"%s代理服务器认证失败"</span> % (args,))</span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                print(<span class="string">"%s链接的其他错误E:(%s)"</span> % (args, str(e)))</span><br><span class="line">        <span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">            print(<span class="string">"%s发生未知错误E:(%s)"</span> % (args, str(e)))</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line">    <span class="keyword">return</span> _deco</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="decorator">@request_error_handler</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">test_proxy_connection</span><span class="params">(proxy, user, passwd, return_ip)</span>:</span></span><br><span class="line">    proxies = &#123;</span><br><span class="line">        <span class="string">"https"</span>: <span class="string">"http://%s:%s@%s"</span> % (user, passwd, proxy),</span><br><span class="line">    &#125;</span><br><span class="line">    url = <span class="string">"https://httpbin.org/ip"</span></span><br><span class="line">    r = requests.get(url, proxies=proxies, timeout=<span class="number">10</span>)</span><br><span class="line">    origin = r.json().get(<span class="string">"origin"</span>, <span class="keyword">None</span>)</span><br><span class="line">    <span class="keyword">if</span> return_ip == origin:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">True</span></span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">False</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    proxys = []</span><br><span class="line">    <span class="keyword">for</span> proxy, config <span class="keyword">in</span> proxy_configs.items():</span><br><span class="line">        status = test_proxy_connection(proxy, config.get(<span class="string">'user'</span>),</span><br><span class="line">                config.get(<span class="string">'passwd'</span>), config.get(<span class="string">'return'</span>))</span><br><span class="line">        <span class="keyword">if</span> status:</span><br><span class="line">            proxys.append((proxy, config.get(<span class="string">"priority"</span>)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">with</span> open(<span class="string">'proxys.json'</span>, <span class="string">'w'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        f.write(json.dumps(proxys))</span><br></pre></td></tr></table></figure>
<p>然后经过pac文件路径改成现在起的地址.需要说明一点有些系统支持的pac文件每隔一段时间会重载pac文件, 这个时间越快对于客户端的故障转移就越及时. pac服务端的故障转移取决于reload.py 的执行间隔, 可以在crontab里面设置为5分钟, 甚至更少的时间.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近协助搭建了企业级翻墙系统， 由于没有现成的公司提供这些， 也没有成套比较成熟的方案(国外人用不着, 国内人不敢用的东西). 所以就自己摸索搭建而且也搭建了， 而且相对来说能控制. 可以参考这里<a href="http://omem.me/2015/11/06/offi]]>
    </summary>
    
      <category term="Flask" scheme="http://omem.me/tags/Flask/"/>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
      <category term="Squid" scheme="http://omem.me/tags/Squid/"/>
    
      <category term="Stunnel" scheme="http://omem.me/tags/Stunnel/"/>
    
      <category term="翻墙" scheme="http://omem.me/tags/%E7%BF%BB%E5%A2%99/"/>
    
      <category term="折腾" scheme="http://omem.me/categories/%E6%8A%98%E8%85%BE/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[JPG2ASCII开发上线记录]]></title>
    <link href="http://omem.me/2015/11/18/flask-jpg2ascii/"/>
    <id>http://omem.me/2015/11/18/flask-jpg2ascii/</id>
    <published>2015-11-18T06:17:10.000Z</published>
    <updated>2015-11-18T06:33:07.000Z</updated>
    <content type="html"><![CDATA[<h2 id="介绍">介绍</h2><p>刚开始做运维的时候喜欢在登录服务器的时候自动打印一些ASCII图像， 于是大量搜寻这种图片以做到自己的欢迎页独一无二。 想想有点不误正业， 现在虽说找到合适的ASCII图形， 相对于以前不喜这个东西了， 但至少是一段时间的情怀. 最近研究flask， 碰巧又遇到jp2a这个开源软件, 所以想把图片转ASCII图像做成一个在线服务, 顺便入门flask.<br><a href="jpg2ascii.herokuapp.com">JPG2ASCII</a></p>
<h3 id="用到的开源">用到的开源</h3><p><strong>jp2a</strong></p>
<p>进行转换的工具<br>项目地址:  <a href="https://csl.name/jp2a/" target="_blank" rel="external">https://csl.name/jp2a/</a></p>
<blockquote>
<p>jp2a is a small utility that converts JPG images to ASCII. It’s written in C and released under the GPL.</p>
</blockquote>
<p><strong>flask</strong></p>
<p>一个Python web框架<br>项目地址: <a href="https://github.com/mitsuhiko/flask" target="_blank" rel="external">https://github.com/mitsuhiko/flask</a></p>
<blockquote>
<p>A microframework based on Werkzeug, Jinja2 and good intentions <a href="http://flask.pocoo.org/" target="_blank" rel="external">http://flask.pocoo.org/</a></p>
</blockquote>
<p><strong>semantic-UI</strong></p>
<p>一个前端开发框架<br>项目地址: <a href="https://github.com/semantic-org/semantic-ui/" target="_blank" rel="external">https://github.com/semantic-org/semantic-ui/</a></p>
<blockquote>
<p>Semantic is a development framework that helps create beautiful, responsive layouts using human-friendly HTML.</p>
</blockquote>
<h2 id="主要思路">主要思路</h2><p>前端网页UI将图片和参数传递到后端flask, 然后保存图片生成ASCII最后返回生成结果.项目已经开源， 这里不贴代码了， 有兴趣移步到<a href="https://github.com/jackeyGao/Flask-JPG2ASCII" target="_blank" rel="external">https://github.com/jackeyGao/Flask-JPG2ASCII</a></p>
<h2 id="最后部署heroku">最后部署heroku</h2><p><code>Heroku</code>是一个支持多种编程语言的云平台即服务</p>
<p>Python 的web程序指定好<code>Procfile</code> 和 <code>requirements.txt</code> 就可以正常工作了， 但是由于此次项目用到了jp2a这个需要编译的工具, 现在就有个问题. 现在本地的jp2a可执行文件是不能在heroku机器上运行成功的, 所以我怎么在heroku上编译这个工具。 幸运的是heroku支持的， 官方的<code>快速开始</code>文档没有关于这个的介绍, 我在国外的一个博客看到有个伙计成功了. 下面介绍</p>
<p>首先需要获得一个shell命令行交互环境.其次需要把包放到heroku APP机器上, 这个可以scp, 或者wget, curl.<br>获得shell(其实相当于ssh操作这台机器)， 使用heroku的run命令</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">heroku run /bin/bash</span><br></pre></td></tr></table></figure>
<p>然后就会有一个shell环境来操作app机器, 这时候</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">curl -O http://sourceforge.net/projects/jp2a/files/latest/download</span><br><span class="line"></span><br><span class="line">tar zxvf download</span><br><span class="line"><span class="built_in">cd</span> jp2a-xxxxx/</span><br><span class="line">./configure --prefix=/app/.heroku/vendor/jp2a</span><br><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure>
<p>编译完成后需要把这个jp2a可执行命令打进包里面, heroku app机器上不太方便git操作, 我这边是在heroku app机器scp到我的服务器上. 然后add commit.</p>
]]></content>
    <summary type="html">
    <![CDATA[<h2 id="介绍">介绍</h2><p>刚开始做运维的时候喜欢在登录服务器的时候自动打印一些ASCII图像， 于是大量搜寻这种图片以做到自己的欢迎页独一无二。 想想有点不误正业， 现在虽说找到合适的ASCII图形， 相对于以前不喜这个东西了， 但至少是一段时间的情怀. 最近研]]>
    </summary>
    
      <category term="flask" scheme="http://omem.me/tags/flask/"/>
    
      <category term="heroku" scheme="http://omem.me/tags/heroku/"/>
    
      <category term="jpg2ascii" scheme="http://omem.me/tags/jpg2ascii/"/>
    
      <category term="python" scheme="http://omem.me/tags/python/"/>
    
      <category term="Python" scheme="http://omem.me/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[企业级翻墙方案]]></title>
    <link href="http://omem.me/2015/11/06/offices-proxy/"/>
    <id>http://omem.me/2015/11/06/offices-proxy/</id>
    <published>2015-11-06T07:53:27.000Z</published>
    <updated>2015-11-06T08:41:49.000Z</updated>
    <content type="html"><![CDATA[<p>为了公司内一些技术员工的要求访问google查资料, 公司准备采购国外vps来建设内部翻墙方案.利用公司内部的认证系统（Open LDAP）来进行账号授权。然后通过PAC文件进行网站过滤.</p>
<h2 id="准备工作">准备工作</h2><p><strong>服务器</strong></p>
<ul>
<li>自由网络的VPS若干, 以下简称VPS.</li>
<li>LDAP 服务, 认证服务器</li>
<li>内部分流机器, 以下简称分流机器</li>
<li>提供PAC服务机器(HTTP服务), 可以和分流服务器共用</li>
</ul>
<p><strong>开源软件</strong></p>
<ul>
<li>Squid</li>
<li>Stunnel</li>
</ul>
<h2 id="思考工作">思考工作</h2><p>首先要考虑加密工作, 随着墙的升级, 越来越多的手段都被禁止或者被干扰. 所以加密一定要做的， 这里采用了Stunnel进行加密.其次是网站过滤,虽然一些技术人员不会关注政治黑暗， 但一些视频娱乐网站也是要控制的.这里用PAC文件来控制， 有些人懂一些网络基础直接连接端口进行全局proxy也不是不可能的。 这个地方可以通过squid的ACL来控制.关于ACL本文不会描述 ， 请自行查阅squid文档.</p>
<p><strong>所以</strong></p>
<ul>
<li>加密 (保证在公网使用ssl加密)</li>
<li>控制 (这个看需求了, 最好控制youtube等无用的大流量网站)</li>
</ul>
<p><strong>大概的路线</strong></p>
<p><strong>Client</strong> &lt;~localnetl~&gt; <strong>PAC</strong> &lt;~localnetl~&gt; <strong>分流Stunnel</strong> &lt;~internet~&gt; <strong>VPSStunnel</strong> &lt;~vps net~&gt; <strong>Squid</strong> &lt;~internet~&gt; <strong>目标服务器</strong></p>
<h2 id="安装操作">安装操作</h2><p>参考这里: <a href="http://fuweiyi.com/others/2014/05/15/a-Centos-Squid-Stunnel-proxy.html" target="_blank" rel="external">http://fuweiyi.com/others/2014/05/15/a-Centos-Squid-Stunnel-proxy.html</a></p>
<p>我说明下和ldap关联集中认证.首先调通 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/lib64/squid/squid_ldap_auth -u -cn <span class="operator">-f</span> <span class="string">"uid=%s"</span> -b <span class="string">"ou=people,dc=example,dc=com"</span> -D <span class="string">"cn=squid,ou=people,dc=example,dc=com"</span> -w <span class="string">"认证密码"</span>  -H ldap://ldap.example.com</span><br><span class="line"><span class="variable">$username</span> <span class="variable">$password</span> <span class="comment"># 这里输入测试认证的用户名 空格 密码</span></span><br><span class="line">OK <span class="comment">#这里是ok才是正常</span></span><br></pre></td></tr></table></figure>
<p>然后修改squid配置文件</p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/squid/squid.conf</span><br><span class="line"></span><br><span class="line">增加下面代码.</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">auth_param basic program /usr/lib64/squid/squid_ldap_auth -u -cn <span class="operator">-f</span> <span class="string">"uid=%s"</span> -b <span class="string">"ou=people,dc=example,dc=com"</span> -D <span class="string">"cn=squid,ou=people,dc=example,dc=com"</span> -w <span class="string">"xxxxxx"</span>  -H ldap://ldap.example.com</span><br><span class="line"><span class="comment">#auth_param basic realm Internet Proxy</span></span><br><span class="line">auth_param basic credentialsttl <span class="number">1</span> minute</span><br><span class="line">acl ldapauth proxy_auth REQUIRED <span class="comment"># 定义ldap认证后的acl，直接转发</span></span><br><span class="line">http_access allow ldapauth <span class="comment"># 允许ldapauth认证过的</span></span><br><span class="line">http_access deny all <span class="comment"># 其他拒绝</span></span><br><span class="line"></span><br><span class="line">...</span><br></pre></td></tr></table></figure>
<blockquote>
<p>squid_ldap_auth 这个工具是squid程序里面的， 地址可能不是我上面指定的 ， 因为我是yum安装的。 如果是编译安装应该是prefix里面找. 如果没有生效可以通过这个命令进行测试， 具体可以man squid_ldap_auth 查看EXAMPLE里面的介绍. 如果还不行可能是编译没有开启ldap. 这个需要开启， 网上有大量的文档说明开启ldap.</p>
</blockquote>
<p>然后安装<a href="http://fuweiyi.com/others/2014/05/15/a-Centos-Squid-Stunnel-proxy.html" target="_blank" rel="external">文档</a>继续装剩下的。</p>
<h2 id="关于PAC">关于PAC</h2><p>PAC文件可以通过<a href="https://github.com/JinnLynn/GenPAC" target="_blank" rel="external">Genpac</a>生成. 然后使用<strong>PAC服务机器</strong>起个http服务， 让员工通过一个内网地址访问到就行。 这样只有上班实践可以使用翻墙.</p>
<h2 id="关于拓展">关于拓展</h2><p>多个vps 可以启动多个squid和stunnel服务, 客户端起多个stunnel端口即可.</p>
]]></content>
    <summary type="html">
    <![CDATA[<p>为了公司内一些技术员工的要求访问google查资料, 公司准备采购国外vps来建设内部翻墙方案.利用公司内部的认证系统（Open LDAP）来进行账号授权。然后通过PAC文件进行网站过滤.</p>
<h2 id="准备工作">准备工作</h2><p><strong>服务器<]]>
    </summary>
    
      <category term="Squid" scheme="http://omem.me/tags/Squid/"/>
    
      <category term="Stunnel" scheme="http://omem.me/tags/Stunnel/"/>
    
      <category term="vps" scheme="http://omem.me/tags/vps/"/>
    
      <category term="翻墙" scheme="http://omem.me/tags/%E7%BF%BB%E5%A2%99/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Conoha主机测评]]></title>
    <link href="http://omem.me/2015/11/02/use-conoha/"/>
    <id>http://omem.me/2015/11/02/use-conoha/</id>
    <published>2015-11-02T07:41:12.000Z</published>
    <updated>2015-11-27T02:59:09.000Z</updated>
    <content type="html"><![CDATA[<p>最近由于心知肚明原因， 原来的linode主机已不能使用。所以最近又开始了疯狂找主机的历程， 说起这个简直不能提起。 我本人也连续找了好多家， linode更换了一次ip依然不能访问。然后又找了搬瓦工， 无奈速度简直不能忍受， 打开链接的时间能让我细品一杯茶.</p>
<p>再后来就找到conoha ， 说起conoha之前我注册过， 而且使用别人推荐链接注册，然后加上活动送的1000日元总共2000日元，他们家东京机房是900元，  这些能用两个月的日本机房</p>
<p>开端总是不好的。 我创建第一个主机除了22端口外， 其他端口均不通.然后找客服， 要求更换ip。 客服告知为不能更换ip.然后他们提供了一种方法来更换. 先创建另外一台， 然后把这台机器删除.全程聊天他们一直用日本语，很是无语😓.</p>
<p>第二台， 延迟时间比第一台少, 大概133ms</p>
<p>如此周折， 算是找到一个相对靠谱的vps了。 conoha 是按照时间进行计费的， 尽快把之前的主机删除即可.</p>
<p>使用推荐链接会有优惠。</p>
<p><a href="https://www.conoha.jp/referral/?token=587K1ucxrGKjarxl9o.8AJxc718ZZfdHt9QFr5HR9_DprBM._ZI-AHH" target="_blank" rel="external">我是链接</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>最近由于心知肚明原因， 原来的linode主机已不能使用。所以最近又开始了疯狂找主机的历程， 说起这个简直不能提起。 我本人也连续找了好多家， linode更换了一次ip依然不能访问。然后又找了搬瓦工， 无奈速度简直不能忍受， 打开链接的时间能让我细品一杯茶.</p>
<p]]>
    </summary>
    
      <category term="conoha" scheme="http://omem.me/tags/conoha/"/>
    
      <category term="vps" scheme="http://omem.me/tags/vps/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[幻想与现实]]></title>
    <link href="http://omem.me/2015/10/04/illusion-and-reality/"/>
    <id>http://omem.me/2015/10/04/illusion-and-reality/</id>
    <published>2015-10-04T12:48:51.000Z</published>
    <updated>2015-10-04T12:53:27.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/images/photo-1440964829947-ca3277bd37f8.jpeg" alt=""></p>
<p>我是个会意淫的人， 从自己的爱情， 到自己的事业， 总是憧憬那么美好的事情。时间可以是将来， 可以是过去， 但总是美好。 当一个人的时候， 特别是晚上睡觉的之前的半个小时， 总能想到很多不可思议的遐想， 这些遐想太美妙了， 让我不可自拔， 每天晚上我都会想象这些美好的事情， 有时候开始一个新的意淫， 有时候则接着之前的剧情发展， 期间我无数次告诉自己这是假的， 马上停止下来继续你的睡眠， 可是越是美好越让我心潮澎湃， 激动处我有时能微笑， 有时候能感动到流泪， 然后再无睡意。</p>
<p>不得不说， 这些想象真的很难实现， 太过于虚幻、美好、 完美。我不知道这个是不是病， 我想这是每个人的共性， 都会一致的幻想自己丰衣足食， 总是很轻松， 不会为未来担忧， 不后悔过去， 因为过去是按照自己的设想过来的。 如果我让这些写出来， 估计也是屌丝逆袭人生的大剧， 会吸引同类病种人群大量观看， 我也就成了一位有病的伟大编剧。每次都不能从 YY 中把我自己唤醒， 感觉是被幻想召唤走了， 我跟着这种心理不断创造出美好， 并被这些美好吸引， 吸引着我持续输出更美的结局， 让我不能理解的是这些创造我也会根据自身和社会因素来克制， 所以在我糊涂的幻想中我认为这些就是现实， 之后我完全不能自拔。</p>
<p>最近越来越严重了， 我到网上查了查这种状况是否正常， 其实我深知这是不正常的表现。 只是想知道为什么会产生这种不健康的生活习惯， 查来查去给出最多是失眠造成的脑袋空想。我并不在乎这种病在并发能给我有多大危害， 但每次早上我都死气沉沉， 觉得好像失恋一样， 甚至产生一种厌世的心态， 我知道可能和我晚上空想有关。</p>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/images/photo-1440964829947-ca3277bd37f8.jpeg" alt=""></p>
<p>我是个会意淫的人， 从自己的爱情， 到自己的事业， 总是憧憬那么美好的事情。时间可以是将来， 可以是过去， 但总是]]>
    </summary>
    
      <category term="病" scheme="http://omem.me/tags/%E7%97%85/"/>
    
      <category term="随想录" scheme="http://omem.me/tags/%E9%9A%8F%E6%83%B3%E5%BD%95/"/>
    
      <category term="随笔" scheme="http://omem.me/categories/%E9%9A%8F%E7%AC%94/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[Django url 反解析]]></title>
    <link href="http://omem.me/2015/09/30/django-url-reverse/"/>
    <id>http://omem.me/2015/09/30/django-url-reverse/</id>
    <published>2015-09-30T06:07:20.000Z</published>
    <updated>2015-11-27T02:59:19.000Z</updated>
    <content type="html"><![CDATA[<p>Django 是个python中web-framework<br>MTV框架能够快速的开发网站, 刚开始学习django时候， 对于模版里面经常根据自己项目的<code>urls</code>来手写链接.<br>虽然这种方法是可行的， 但是不是规范的。<br>为什么呢？<br>最近公司要做一个django改造， 由于改造需求的原因， 项目urls统一加上<code>项目名字</code><br>urls.py 中很简单， 在url前面加上就行. 但是很多的模版中的url都要改掉. 这就增加了改造的复杂度。<br>通过此次改造我发现<br>其实django中有一种很好的机制, 来通过urls中的viewname 来反解析url生成url.</p>
<p>他们分别是: <code>django.core.urlresolvers.reverse</code> 和 <code>templatetags.url</code></p>
<h2 id="django-core-urlresolvers-reverse">django.core.urlresolvers.reverse</h2><p>这个函数主要用在于python代码中， 详情请看下面案例</p>
<p><code>urls.py</code>这里是一个对象详细页面, 需要两个参数.<br><code>models.py</code>中要通过<code>viewname</code> detail 来生成url.</p>
<h3 id="urls-py">urls.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">urlpatterns = [</span><br><span class="line">    ...</span><br><span class="line">    url(<span class="string">r'^step/(?P&lt;label&gt;.*)/(?P&lt;name&gt;.*)$'</span>, step, name=<span class="string">"detail"</span>),</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure>
<h3 id="models-py">models.py</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Step</span><span class="params">(models.Model)</span>:</span></span><br><span class="line">    ......</span><br><span class="line">    ......</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_absolute_url</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> reverse(<span class="string">'detail'</span>, kwargs=&#123;</span><br><span class="line">            <span class="string">'label'</span>: self.label,</span><br><span class="line">            <span class="string">'name'</span>: self.name&#125;</span><br><span class="line">        )</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">label_name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.label.name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__unicode__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> unicode(self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.name</span><br></pre></td></tr></table></figure>
<h2 id="templatetags-url">templatetags.url</h2><p>这里还使用上面的urls.py 中的detail举例, 在模版中生成url</p>
<h3 id="base-html">base.html</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;% url "detail" step.label.name step.name %&#125;</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>Django 是个python中web-framework<br>MTV框架能够快速的开发网站, 刚开始学习django时候， 对于模版里面经常根据自己项目的<code>urls</code>来手写链接.<br>虽然这种方法是可行的， 但是不是规范的。<br>为什么呢？<b]]>
    </summary>
    
      <category term="Django" scheme="http://omem.me/tags/Django/"/>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
      <category term="Python" scheme="http://omem.me/categories/Python/"/>
    
      <category term="Django" scheme="http://omem.me/categories/Python/Django/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[查看你历史命令的使用率]]></title>
    <link href="http://omem.me/2015/09/30/show-your-top-command/"/>
    <id>http://omem.me/2015/09/30/show-your-top-command/</id>
    <published>2015-09-30T05:46:55.000Z</published>
    <updated>2015-09-30T06:01:34.000Z</updated>
    <content type="html"><![CDATA[<p>一个查看历史命令的使用率工具， 因为看到<code>oh-my-zsh</code>项目中的<code>zsh_stats</code>function 后有感仿照开发了一个。 本项目不仅支持<code>zsh_history</code>而且支持<code>bash_history</code> 。 还有可扩展的趋势.</p>
<h2 id="oh-my-zsh_之_zsh_stats">oh-my-zsh 之 zsh_stats</h2><p>如果你用<code>oh-my-zsh</code> ， 那么你就有了这个功能。 </p>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">$ zsh_stats</span><br><span class="line">     <span class="number">1</span>  <span class="number">3290</span>  <span class="number">32.9033</span>%   vim</span><br><span class="line">     <span class="number">2</span>  <span class="number">2204</span>  <span class="number">22.0422</span>%   python</span><br><span class="line">     <span class="number">3</span>  <span class="number">902</span>   <span class="number">9.0209</span>%    ls</span><br><span class="line">     <span class="number">4</span>  <span class="number">730</span>   <span class="number">7.30073</span>%   git</span><br><span class="line">     <span class="number">5</span>  <span class="number">449</span>   <span class="number">4.49045</span>%   <span class="built_in">cd</span></span><br><span class="line">     <span class="number">6</span>  <span class="number">194</span>   <span class="number">1.94019</span>%   curl</span><br><span class="line">     <span class="number">7</span>  <span class="number">170</span>   <span class="number">1.70017</span>%   pip</span><br><span class="line">     <span class="number">8</span>  <span class="number">168</span>   <span class="number">1.68017</span>%   ll</span><br><span class="line">     <span class="number">9</span>  <span class="number">157</span>   <span class="number">1.57016</span>%   scrapy</span><br><span class="line">    <span class="number">10</span>  <span class="number">142</span>   <span class="number">1.42014</span>%   rm</span><br><span class="line">    <span class="number">11</span>  <span class="number">96</span>    <span class="number">0.960096</span>%  cat</span><br><span class="line">    <span class="number">12</span>  <span class="number">78</span>    <span class="number">0.780078</span>%  hexo</span><br><span class="line">    <span class="number">13</span>  <span class="number">76</span>    <span class="number">0.760076</span>%  clear</span><br><span class="line">    <span class="number">14</span>  <span class="number">63</span>    <span class="number">0.630063</span>%  mkdir</span><br><span class="line">    <span class="number">15</span>  <span class="number">60</span>    <span class="number">0.60006</span>%   ping</span><br><span class="line">    <span class="number">16</span>  <span class="number">59</span>    <span class="number">0.590059</span>%  grep</span><br><span class="line">    <span class="number">17</span>  <span class="number">58</span>    <span class="number">0.580058</span>%  workon</span><br><span class="line">    <span class="number">18</span>  <span class="number">57</span>    <span class="number">0.570057</span>%  sudo</span><br><span class="line">    <span class="number">19</span>  <span class="number">57</span>    <span class="number">0.570057</span>%  docker</span><br><span class="line">    <span class="number">20</span>  <span class="number">55</span>    <span class="number">0.550055</span>%  mv</span><br><span class="line">$ <span class="built_in">which</span> zsh_stats <span class="comment"># oh-my-zsh 封装的函数</span></span><br><span class="line"><span class="function"><span class="title">zsh_stats</span></span> () &#123;</span><br><span class="line">    <span class="built_in">fc</span> <span class="operator">-l</span> <span class="number">1</span> | awk <span class="string">'&#123;CMD[$2]++;count++;&#125;END &#123; for (a in CMD)print CMD[a] " " CMD[a]/count*100 "% " a;&#125;'</span> | grep -v <span class="string">"./"</span> | column -c3 <span class="operator">-s</span> <span class="string">" "</span> -t | sort -nr | nl | head -n20</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="cmdstats_项目">cmdstats 项目</h2><p>查看你终端命令使用频率列表, 原理是通过宿主目录下的 <code>.*history</code> 分析后得到历史命令使用频率状态， 并且进行排序输出.</p>
<p>目前支持 <code>~/.bash_history</code> 、 <code>~/.zsh_history</code></p>
<h3 id="安装">安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install git+https://github.com/jackeyGao/cmdstats.git</span><br></pre></td></tr></table></figure>
<h3 id="使用">使用</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">$ cmdstats -h</span><br><span class="line">usage: cmdstats [-h] [<span class="operator">-l</span> LIMIT]</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this <span class="built_in">help</span> message and <span class="built_in">exit</span></span><br><span class="line">  <span class="operator">-l</span> LIMIT, --limit LIMIT</span><br><span class="line">                        显示条数[default: <span class="number">20</span>]</span><br></pre></td></tr></table></figure>
<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">$ cmdstats</span><br><span class="line"><span class="number">1</span>   <span class="number">3612</span>  <span class="number">33.13154</span>%  vim</span><br><span class="line"><span class="number">2</span>   <span class="number">2473</span>  <span class="number">22.68391</span>%  python</span><br><span class="line"><span class="number">3</span>   <span class="number">1018</span>  <span class="number">9.33774</span>%   ls</span><br><span class="line"><span class="number">4</span>   <span class="number">692</span>   <span class="number">6.34746</span>%   git</span><br><span class="line"><span class="number">5</span>   <span class="number">487</span>   <span class="number">4.46707</span>%   <span class="built_in">cd</span></span><br><span class="line"><span class="number">6</span>   <span class="number">204</span>   <span class="number">1.87122</span>%   ll</span><br><span class="line"><span class="number">7</span>   <span class="number">194</span>   <span class="number">1.77949</span>%   curl</span><br><span class="line"><span class="number">8</span>   <span class="number">178</span>   <span class="number">1.63273</span>%   pip</span><br><span class="line"><span class="number">9</span>   <span class="number">157</span>   <span class="number">1.4401</span>%    scrapy</span><br><span class="line"><span class="number">10</span>  <span class="number">147</span>   <span class="number">1.34838</span>%   rm</span><br><span class="line"><span class="number">11</span>  <span class="number">98</span>    <span class="number">0.89892</span>%   cat</span><br><span class="line"><span class="number">12</span>  <span class="number">91</span>    <span class="number">0.83471</span>%   clear</span><br><span class="line"><span class="number">13</span>  <span class="number">86</span>    <span class="number">0.78885</span>%   ping</span><br><span class="line"><span class="number">14</span>  <span class="number">78</span>    <span class="number">0.71547</span>%   hexo</span><br><span class="line"><span class="number">15</span>  <span class="number">73</span>    <span class="number">0.6696</span>%    docker</span><br><span class="line"><span class="number">16</span>  <span class="number">71</span>    <span class="number">0.65126</span>%   mkdir</span><br><span class="line"><span class="number">17</span>  <span class="number">61</span>    <span class="number">0.55953</span>%   workon</span><br><span class="line"><span class="number">18</span>  <span class="number">60</span>    <span class="number">0.55036</span>%   grep</span><br><span class="line"><span class="number">19</span>  <span class="number">58</span>    <span class="number">0.53201</span>%   sudo</span><br><span class="line"><span class="number">20</span>  <span class="number">57</span>    <span class="number">0.52284</span>%   mv</span><br><span class="line">$ <span class="built_in">which</span> cmdstats</span><br><span class="line">/usr/<span class="built_in">local</span>/bin//cmdstats</span><br></pre></td></tr></table></figure>
<h3 id="项目地址">项目地址</h3><p><a href="https://github.com/jackeyGao/cmdstats" target="_blank" rel="external">jackeyGao/cmdstats</a></p>
]]></content>
    <summary type="html">
    <![CDATA[<p>一个查看历史命令的使用率工具， 因为看到<code>oh-my-zsh</code>项目中的<code>zsh_stats</code>function 后有感仿照开发了一个。 本项目不仅支持<code>zsh_history</code>而且支持<code>bash_hi]]>
    </summary>
    
      <category term="Bash" scheme="http://omem.me/tags/Bash/"/>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
      <category term="Zsh" scheme="http://omem.me/tags/Zsh/"/>
    
      <category term="command" scheme="http://omem.me/tags/command/"/>
    
      <category term="Python" scheme="http://omem.me/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[使用Python将两张照片透明重叠]]></title>
    <link href="http://omem.me/2015/09/30/python-pillow/"/>
    <id>http://omem.me/2015/09/30/python-pillow/</id>
    <published>2015-09-30T05:19:26.000Z</published>
    <updated>2015-11-27T03:00:28.000Z</updated>
    <content type="html"><![CDATA[<p>透明重叠最主要用的是<code>Image.blend</code>方法(详情请看第二个代码块), 第一个代码块主要是将多个图片剪切到一张大图, 然后用这张大图和另外一张非剪切的大图进行透明重叠， 主要<code>Image.blend</code>方法第三个参数是相对于第一张图片透明度。 </p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="string">'''</span><br><span class="line">File Name: merge.py</span><br><span class="line">Author: JackeyGao</span><br><span class="line">mail: junqi.gao@shuyun.com</span><br><span class="line">Created Time: 一  6/ 1 13:27:49 2015</span><br><span class="line">'''</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> __future__ <span class="keyword">import</span> division</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> math</span><br><span class="line"><span class="keyword">import</span> Image</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_resize</span><span class="params">(img, size=<span class="params">(<span class="number">4</span>, <span class="number">3</span>)</span>)</span>:</span></span><br><span class="line">    <span class="string">"""调整图片大小</span><br><span class="line">    """</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        <span class="keyword">if</span> img.mode <span class="keyword">not</span> <span class="keyword">in</span> (<span class="string">'L'</span>, <span class="string">'RGB'</span>):</span><br><span class="line">            img = img.convert(<span class="string">'RGB'</span>)</span><br><span class="line">        img = img.resize(size)</span><br><span class="line">    <span class="keyword">except</span> Exception, e:</span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="keyword">return</span> img</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">image_merge</span><span class="params">(images, output_dir=<span class="string">'output'</span>, output_name=<span class="string">'merge.jpg'</span>, \</span><br><span class="line">                restriction_max_width=None, restriction_max_height=None)</span>:</span></span><br><span class="line">    <span class="string">"""垂直合并多张图片</span><br><span class="line">    images - 要合并的图片路径列表</span><br><span class="line">    ouput_dir - 输出路径</span><br><span class="line">    output_name - 输出文件名</span><br><span class="line">    restriction_max_width - 限制合并后的图片最大宽度，如果超过将等比缩小</span><br><span class="line">    restriction_max_height - 限制合并后的图片最大高度，如果超过将等比缩小</span><br><span class="line">    """</span></span><br><span class="line">    x_number = <span class="number">10</span> <span class="keyword">if</span> len(images) &gt;= <span class="number">5</span> <span class="keyword">else</span> len(images)</span><br><span class="line">    y_number = int(math.ceil(len(images) / x_number))</span><br><span class="line">    total_height = <span class="number">0</span></span><br><span class="line">    <span class="comment"># 计算合成后图片的宽度（以最宽的为准）和高度</span></span><br><span class="line">    <span class="keyword">for</span> img_path <span class="keyword">in</span> images:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(img_path):</span><br><span class="line">            img = Image.open(img_path)</span><br><span class="line">            img = img.resize((<span class="number">712</span>, <span class="number">960</span>))</span><br><span class="line">            width, height = img.size</span><br><span class="line"></span><br><span class="line">            max_width = width * x_number</span><br><span class="line">            total_height = height * y_number</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 产生一张空白图</span></span><br><span class="line">    new_img = Image.new(<span class="string">'RGB'</span>, (max_width, total_height), <span class="number">255</span>)</span><br><span class="line">    <span class="comment"># 合并</span></span><br><span class="line">    x = y = n = <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> img_path <span class="keyword">in</span> images:</span><br><span class="line">        <span class="keyword">if</span> os.path.exists(img_path):</span><br><span class="line">            img = Image.open(img_path)</span><br><span class="line">            img = img.resize((<span class="number">712</span>, <span class="number">960</span>))</span><br><span class="line">            width, height = img.size</span><br><span class="line">            <span class="keyword">print</span> width, height</span><br><span class="line">            new_img.paste(img, (x, y))</span><br><span class="line"></span><br><span class="line">            n += <span class="number">1</span></span><br><span class="line">            <span class="keyword">if</span> n % x_number == <span class="number">0</span>:</span><br><span class="line">                y += height</span><br><span class="line">                x = <span class="number">0</span></span><br><span class="line">            <span class="keyword">else</span>:</span><br><span class="line">                x += width</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> restriction_max_width <span class="keyword">and</span> max_width &gt;= restriction_max_width:</span><br><span class="line">        <span class="comment"># 如果宽带超过限制</span></span><br><span class="line">        <span class="comment"># 等比例缩小</span></span><br><span class="line">        ratio = restriction_max_height / float(max_width)</span><br><span class="line">        max_width = restriction_max_width</span><br><span class="line">        total_height = int(total_height * ratio)</span><br><span class="line">        new_img = image_resize(new_img, size=(max_width, total_height))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> restriction_max_height <span class="keyword">and</span> total_height &gt;= restriction_max_height:</span><br><span class="line">        <span class="comment"># 如果高度超过限制</span></span><br><span class="line">        <span class="comment"># 等比例缩小</span></span><br><span class="line">        ratio = restriction_max_height / float(total_height)</span><br><span class="line">        max_width = int(max_width * ratio)</span><br><span class="line">        total_height = restriction_max_height</span><br><span class="line">        new_img = image_resize(new_img, size=(max_width, total_height))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> os.path.exists(output_dir):</span><br><span class="line">        os.makedirs(output_dir)</span><br><span class="line">    save_path = <span class="string">'%s/%s'</span> % (output_dir, output_name)</span><br><span class="line">    new_img.save(save_path)</span><br><span class="line">    <span class="keyword">return</span> save_path</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    <span class="keyword">import</span> os</span><br><span class="line">    image_files = [ <span class="string">"input/%s"</span> % f <span class="keyword">for</span> f <span class="keyword">in</span> os.listdir(<span class="string">"input/"</span>) <span class="keyword">if</span> f.endswith(<span class="string">"pg"</span>) ]</span><br><span class="line"></span><br><span class="line">    image_files = image_files * <span class="number">4</span></span><br><span class="line"></span><br><span class="line">    image_merge(images=image_files)</span><br></pre></td></tr></table></figure>
<p>将两张背景图重叠</p>
<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Image</span><br><span class="line">img = Image.open(<span class="string">"bg.jpeg"</span>)</span><br><span class="line">img2 = Image.open(<span class="string">"merge.jpg"</span>)</span><br><span class="line">merge = Image.blend(img, img2, <span class="number">0.3</span>)</span><br><span class="line">merge.save(<span class="string">"my.jpg"</span>)</span><br></pre></td></tr></table></figure>
]]></content>
    <summary type="html">
    <![CDATA[<p>透明重叠最主要用的是<code>Image.blend</code>方法(详情请看第二个代码块), 第一个代码块主要是将多个图片剪切到一张大图, 然后用这张大图和另外一张非剪切的大图进行透明重叠， 主要<code>Image.blend</code>方法第三个参数是相对于第]]>
    </summary>
    
      <category term="Pillow" scheme="http://omem.me/tags/Pillow/"/>
    
      <category term="Python" scheme="http://omem.me/tags/Python/"/>
    
      <category term="图片处理" scheme="http://omem.me/tags/%E5%9B%BE%E7%89%87%E5%A4%84%E7%90%86/"/>
    
      <category term="Python" scheme="http://omem.me/categories/Python/"/>
    
  </entry>
  
  <entry>
    <title><![CDATA[黑夜的猫]]></title>
    <link href="http://omem.me/2015/09/30/black-night-cat/"/>
    <id>http://omem.me/2015/09/30/black-night-cat/</id>
    <published>2015-09-30T04:50:22.000Z</published>
    <updated>2016-01-15T03:34:05.000Z</updated>
    <content type="html"><![CDATA[<p><img src="/uploads/images/photo-1415931633537-351070d20b81.jpeg" alt="黎明"></p>
<blockquote class="blockquote-center"><p>夜</p>
<p>厚夜</p>
<p>路灯下的猫</p>
<p>猫眼中的笑</p>
<p>在烦躁</p>
<p>在煎熬</p>
<p>如同， 美好云雾缭绕</p>
<p>还好， 不再不可救药</p>
</blockquote>
]]></content>
    <summary type="html">
    <![CDATA[<p><img src="/uploads/images/photo-1415931633537-351070d20b81.jpeg" alt="黎明"></p>
<blockquote class="blockquote-center"><p>夜</p>
<p>厚夜</p>
<]]>
    </summary>
    
      <category term="现代诗" scheme="http://omem.me/tags/%E7%8E%B0%E4%BB%A3%E8%AF%97/"/>
    
      <category term="淫诗作对" scheme="http://omem.me/categories/%E6%B7%AB%E8%AF%97%E4%BD%9C%E5%AF%B9/"/>
    
  </entry>
  
</feed>
